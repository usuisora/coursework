import { Plugin, Options, SchemaListener, Build, Context, SchemaBuilder, Inflection } from "graphile-build";
import { GraphQLSchema } from "graphql";
import { inflections, Inflector, formatSQLForDebugging } from "graphile-build-pg";
import { Pool, Client } from "pg";
export { Plugin, Build, Context, SchemaBuilder, SchemaListener, Inflection, Options, formatSQLForDebugging, };
export declare type mixed = {} | string | number | boolean | undefined | null;
export interface PostGraphileCoreOptions {
    dynamicJson?: boolean;
    classicIds?: boolean;
    disableDefaultMutations?: boolean;
    nodeIdFieldName?: string;
    graphileBuildOptions?: Options;
    graphqlBuildOptions?: Options;
    replaceAllPlugins?: Array<Plugin>;
    appendPlugins?: Array<Plugin>;
    prependPlugins?: Array<Plugin>;
    skipPlugins?: Array<Plugin>;
    jwtPgTypeIdentifier?: string;
    jwtSecret?: string;
    inflector?: Inflector;
    pgColumnFilter?: <TSource>(attr: mixed, build: Build, context: Context<TSource>) => boolean;
    viewUniqueKey?: string;
    enableTags?: boolean;
    readCache?: string;
    writeCache?: string;
    setWriteCacheCallback?: (fn: () => Promise<void>) => void;
    legacyRelations?: "only" | "deprecated" | "omit";
    setofFunctionsContainNulls?: boolean;
    legacyJsonUuid?: boolean;
    simpleCollections?: "only" | "both" | "omit";
    includeExtensionResources?: boolean;
    ignoreRBAC?: boolean;
    legacyFunctionsOnly?: boolean;
    ignoreIndexes?: boolean;
}
declare type PgConfig = Client | Pool | string;
export { inflections };
export declare const postGraphileBaseOverrides: {
    enumName(value: string): any;
};
export declare const postGraphileClassicIdsOverrides: {
    column(name: string, _table: string, _schema?: string | undefined): any;
};
export declare const postGraphileInflection: any;
export declare const postGraphileClassicIdsInflection: any;
export declare const PostGraphileInflectionPlugin: Plugin;
export declare const PostGraphileClassicIdsInflectionPlugin: Plugin;
export declare const createPostGraphileSchema: (pgConfig: PgConfig, schemas: string | string[], options?: PostGraphileCoreOptions) => Promise<GraphQLSchema>;
export declare const watchPostGraphileSchema: (pgConfig: PgConfig, schemas: string | string[], options: PostGraphileCoreOptions | undefined, onNewSchema: SchemaListener) => Promise<() => Promise<void>>;
export declare const postGraphQLBaseOverrides: {
    enumName(value: string): any;
};
export declare const postGraphQLClassicIdsOverrides: {
    column(name: string, _table: string, _schema?: string | undefined): any;
};
export declare const postGraphQLInflection: any;
export declare const postGraphQLClassicIdsInflection: any;
export declare const createPostGraphQLSchema: (pgConfig: PgConfig, schemas: string | string[], options?: PostGraphileCoreOptions) => Promise<GraphQLSchema>;
export declare const watchPostGraphQLSchema: (pgConfig: PgConfig, schemas: string | string[], options: PostGraphileCoreOptions | undefined, onNewSchema: SchemaListener) => Promise<() => Promise<void>>;
