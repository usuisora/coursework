{"version":3,"sources":["../src/QueryBuilder.js"],"names":["sql","isDev","process","env","POSTGRAPHILE_ENV","callIfNecessary","o","context","callIfNecessaryArray","Array","isArray","map","v","QueryBuilder","constructor","options","supportsJSONB","locks","finalized","data","cursorPrefix","select","selectCursor","from","join","where","whereBound","lower","upper","orderBy","orderIsUnique","limit","offset","first","last","beforeLock","cursorComparator","compiledData","lock","jsonbBuildObject","fields","length","fieldsChunks","chunkToJson","fieldsChunk","fragment","expr","alias","literal","field","fn","checkLock","push","setCursorComparator","addCursorCondition","cursorValue","isAfter","Error","exprGen","test","identifier","Symbol","isLower","setOrderIsUnique","ascending","nullsFirst","limitGen","offsetGen","previous","isOrderUnique","getTableExpression","getTableAlias","getSelectCursor","getOffset","getFinalLimitAndOffset","flip","Math","min","getFinalOffset","getFinalLimit","getOrderByExpressionsAndDirections","getSelectFieldsCount","lockEverything","buildSelectFields","sqlFragment","buildSelectJson","addNullCase","buildObject","buildWhereBoundClause","clauses","buildWhereClause","includeLowerBound","includeUpperBound","build","asJson","asJsonAggregate","onlyJsonField","Number","flipAlias","aggAlias","_finalize","type","getContext","queryBuilder","beforeLocks","stack","seenFields","reduce","memo","a","b","c","f","replace"],"mappings":";;;;;;AACA;;IAAYA,G;;AAEZ;;;;AACA;;;;;;;;AAEA,MAAMC,QAAQC,QAAQC,GAAR,CAAYC,gBAAZ,KAAiC,aAA/C;;;AAOA,SAASC,eAAT,CAA4BC,CAA5B,EAA2CC,OAA3C,EAAmE;AACjE,MAAI,OAAOD,CAAP,KAAa,UAAjB,EAA6B;AAC3B,WAAOA,EAAEC,OAAF,CAAP;AACD,GAFD,MAEO;AACL,WAAOD,CAAP;AACD;AACF;;AAED,SAASE,oBAAT,CACEF,CADF,EAEEC,OAFF,EAGY;AACV,MAAIE,MAAMC,OAAN,CAAcJ,CAAd,CAAJ,EAAsB;AACpB,WAAOA,EAAEK,GAAF,CAAMC,KAAKP,gBAAgBO,CAAhB,EAAmBL,OAAnB,CAAX,CAAP;AACD,GAFD,MAEO;AACL,WAAOD,CAAP;AACD;AACF;;AAaD,MAAMO,YAAN,CAAmB;;AAgDjBC,cAAYC,UAA+B,EAA3C,EAA+C;AAC7C,SAAKC,aAAL,GACED,QAAQC,aAAR,IAAyB,IAAzB,GAAgC,IAAhC,GAAuC,CAAC,CAACD,QAAQC,aADnD;;AAGA,SAAKC,KAAL,GAAa,EAAb;AACA,SAAKC,SAAL,GAAiB,KAAjB;AACA,SAAKC,IAAL,GAAY;AACV;AACAC,oBAAc,CAAC,SAAD,CAFJ;AAGVC,cAAQ,EAHE;AAIVC,oBAAc,IAJJ;AAKVC,YAAM,IALI;AAMVC,YAAM,EANI;AAOVC,aAAO,EAPG;AAQVC,kBAAY;AACVC,eAAO,EADG;AAEVC,eAAO;AAFG,OARF;AAYVC,eAAS,EAZC;AAaVC,qBAAe,KAbL;AAcVC,aAAO,IAdG;AAeVC,cAAQ,IAfE;AAgBVC,aAAO,IAhBG;AAiBVC,YAAM,IAjBI;AAkBVC,kBAAY,EAlBF;AAmBVC,wBAAkB;AAnBR,KAAZ;AAqBA,SAAKC,YAAL,GAAoB;AAClBjB,oBAAc,CAAC,SAAD,CADI;AAElBC,cAAQ,EAFU;AAGlBC,oBAAc,IAHI;AAIlBC,YAAM,IAJY;AAKlBC,YAAM,EALY;AAMlBC,aAAO,EANW;AAOlBC,kBAAY;AACVC,eAAO,EADG;AAEVC,eAAO;AAFG,OAPM;AAWlBC,eAAS,EAXS;AAYlBC,qBAAe,KAZG;AAalBC,aAAO,IAbW;AAclBC,cAAQ,IAdU;AAelBC,aAAO,IAfW;AAgBlBC,YAAM,IAhBY;AAiBlBE,wBAAkB;AAjBA,KAApB;AAmBA,SAAKD,UAAL,CAAgB,QAAhB,EAA0B,MAAM;AAC9B,WAAKG,IAAL,CAAU,cAAV;AACA,UAAI,KAAKD,YAAL,CAAkBf,YAAtB,EAAoC;AAClC,aAAKD,MAAL,CAAY,KAAKgB,YAAL,CAAkBf,YAA9B,EAA4C,UAA5C;AACD;AACF,KALD;AAMA;AACA,SAAKa,UAAL,CAAgB,OAAhB,EAAyB,MAAM;AAC7B,WAAKG,IAAL,CAAU,YAAV;AACD,KAFD;AAGA,SAAKH,UAAL,CAAgB,QAAhB,EAA0B,MAAM;AAC9B,WAAKG,IAAL,CAAU,YAAV;AACD,KAFD;AAGA,SAAKH,UAAL,CAAgB,OAAhB,EAAyB,MAAM;AAC7B,WAAKG,IAAL,CAAU,YAAV;AACD,KAFD;AAGA,SAAKH,UAAL,CAAgB,OAAhB,EAAyB,MAAM;AAC7B,WAAKG,IAAL,CAAU,OAAV;AACA,WAAKA,IAAL,CAAU,QAAV;AACD,KAHD;AAIA,SAAKH,UAAL,CAAgB,MAAhB,EAAwB,MAAM;AAC5B,WAAKG,IAAL,CAAU,OAAV;AACA,WAAKA,IAAL,CAAU,QAAV;AACD,KAHD;AAID;;AAED;;AAEA;AACAC,mBAAiBC,MAAjB,EAAiD;AAC/C,QAAI,KAAKxB,aAAL,IAAsBwB,OAAOC,MAAP,GAAgB,EAA1C,EAA8C;AAC5C,YAAMC,eAAe,qBAAMF,MAAN,EAAc,EAAd,CAArB;AACA,YAAMG,cAAcC,eAClB5C,IAAI6C,QAAS,sBAAqB7C,IAAIwB,IAAJ,CAChCoB,YAAYjC,GAAZ,CACE,CAAC,CAACmC,IAAD,EAAOC,KAAP,CAAD,KACE/C,IAAI6C,QAAS,GAAE7C,IAAIgD,OAAJ,CAAYD,KAAZ,CAAmB,WAAUD,IAAK,EAFrD,CADgC,EAKhC,IALgC,CAMhC,GAPJ;AAQA,aAAO9C,IAAI6C,QAAS,IAAG7C,IAAIwB,IAAJ,CACrBkB,aAAa/B,GAAb,CAAiBgC,WAAjB,CADqB,EAErB,MAFqB,CAGrB,SAHF;AAID,KAdD,MAcO;AACL;AACA,aAAO3C,IAAI6C,QAAS,qBAAoB7C,IAAIwB,IAAJ,CACtCgB,OAAO7B,GAAP,CACE,CAAC,CAACmC,IAAD,EAAOC,KAAP,CAAD,KAAmB/C,IAAI6C,QAAS,GAAE7C,IAAIgD,OAAJ,CAAYD,KAAZ,CAAmB,WAAUD,IAAK,EADtE,CADsC,EAItC,IAJsC,CAKtC,GALF;AAMD;AACF;;AAED;;AAEAX,aAAWc,KAAX,EAA0BC,EAA1B,EAA0C;AACxC,SAAKC,SAAL,CAAeF,KAAf;AACA,SAAK9B,IAAL,CAAUgB,UAAV,CAAqBc,KAArB,IAA8B,KAAK9B,IAAL,CAAUgB,UAAV,CAAqBc,KAArB,KAA+B,EAA7D;AACA,SAAK9B,IAAL,CAAUgB,UAAV,CAAqBc,KAArB,EAA4BG,IAA5B,CAAiCF,EAAjC;AACD;AACDG,sBAAoBH,EAApB,EAA0C;AACxC,SAAKC,SAAL,CAAe,kBAAf;AACA,SAAKhC,IAAL,CAAUiB,gBAAV,GAA6Bc,EAA7B;AACA,SAAKZ,IAAL,CAAU,kBAAV;AACD;AACDgB,qBAAmBC,WAAnB,EAA6CC,OAA7C,EAA+D;AAC7D,SAAKrB,UAAL,CAAgB,YAAhB,EAA8B,MAAM;AAClC,WAAKG,IAAL,CAAU,kBAAV;AACA,UAAI,CAAC,KAAKD,YAAL,CAAkBD,gBAAvB,EAAyC;AACvC,cAAM,IAAIqB,KAAJ,CAAU,+BAAV,CAAN;AACD;AACD,WAAKpB,YAAL,CAAkBD,gBAAlB,CAAmCmB,WAAnC,EAAgDC,OAAhD;AACD,KAND;AAOD;AACDnC,SAAOqC,OAAP,EAAwBX,KAAxB,EAAyC;AACvC,SAAKI,SAAL,CAAe,QAAf;AACA,QAAI,OAAOJ,KAAP,KAAiB,QAArB,EAA+B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAI,oCAAoCY,IAApC,CAAyCZ,KAAzC,MAAoD,IAAxD,EAA8D;AAC5D,cAAM,IAAIU,KAAJ,CAAW,qBAAoBV,KAAM,IAArC,CAAN;AACD;AACF;AACD,SAAK5B,IAAL,CAAUE,MAAV,CAAiB+B,IAAjB,CAAsB,CAACM,OAAD,EAAUX,KAAV,CAAtB;AACD;AACDzB,eAAaoC,OAAb,EAA8B;AAC5B,SAAKP,SAAL,CAAe,cAAf;AACA,SAAKhC,IAAL,CAAUG,YAAV,GAAyBoC,OAAzB;AACD;AACDnC,OAAKuB,IAAL,EAAmBC,QAAmB/C,IAAI4D,UAAJ,CAAeC,QAAf,CAAtC,EAAgE;AAC9D,SAAKV,SAAL,CAAe,MAAf;AACA,QAAI,CAACL,IAAL,EAAW;AACT,YAAM,IAAIW,KAAJ,CAAU,uBAAV,CAAN;AACD;AACD,QAAI,CAACV,KAAL,EAAY;AACV,YAAM,IAAIU,KAAJ,CAAU,gBAAV,CAAN;AACD;AACD,SAAKtC,IAAL,CAAUI,IAAV,GAAiB,CAACuB,IAAD,EAAOC,KAAP,CAAjB;AACA,SAAKT,IAAL,CAAU,MAAV;AACD;AACD;AACAb,QAAMiC,OAAN,EAAuB;AACrB,SAAKP,SAAL,CAAe,OAAf;AACA,SAAKhC,IAAL,CAAUM,KAAV,CAAgB2B,IAAhB,CAAqBM,OAArB;AACD;AACDhC,aAAWgC,OAAX,EAA4BI,OAA5B,EAA8C;AAC5C,QAAI,OAAOA,OAAP,KAAmB,SAAvB,EAAkC;AAChC,YAAM,IAAIL,KAAJ,CAAU,wCAAV,CAAN;AACD;AACD,SAAKN,SAAL,CAAe,YAAf;AACA,SAAKhC,IAAL,CAAUO,UAAV,CAAqBoC,UAAU,OAAV,GAAoB,OAAzC,EAAkDV,IAAlD,CAAuDM,OAAvD;AACD;AACDK,qBAAmB;AACjB,SAAK5C,IAAL,CAAUW,aAAV,GAA0B,IAA1B;AACD;AACDD,UACE6B,OADF,EAEEM,YAAqB,IAFvB,EAGEC,UAHF,EAIE;AACA,SAAKd,SAAL,CAAe,SAAf;AACA,SAAKhC,IAAL,CAAUU,OAAV,CAAkBuB,IAAlB,CAAuB,CAACM,OAAD,EAAUM,SAAV,EAAqBC,UAArB,CAAvB;AACD;AACDlC,QAAMmC,QAAN,EAA2B;AACzB,SAAKf,SAAL,CAAe,OAAf;;AAEA,QAAI,KAAKhC,IAAL,CAAUY,KAAV,IAAmB,IAAvB,EAA6B;AAC3B,YAAM,IAAI0B,KAAJ,CAAU,0BAAV,CAAN;AACD;AACD,SAAKtC,IAAL,CAAUY,KAAV,GAAkBmC,QAAlB;AACD;AACDlC,SAAOmC,SAAP,EAA6B;AAC3B,SAAKhB,SAAL,CAAe,QAAf;AACA,QAAI,KAAKhC,IAAL,CAAUa,MAAV,IAAoB,IAAxB,EAA8B;AAC5B;AACA,YAAMoC,WAAW,KAAKjD,IAAL,CAAUa,MAA3B;AACA,WAAKb,IAAL,CAAUa,MAAV,GAAmBzB,WAAW;AAC5B,eACEF,gBAAgB+D,QAAhB,EAA0B7D,OAA1B,IACAF,gBAAgB8D,SAAhB,EAA2B5D,OAA3B,CAFF;AAID,OALD;AAMD,KATD,MASO;AACL,WAAKY,IAAL,CAAUa,MAAV,GAAmBmC,SAAnB;AACD;AACF;AACDlC,QAAMA,KAAN,EAAqB;AACnB,SAAKkB,SAAL,CAAe,OAAf;AACA,QAAI,KAAKhC,IAAL,CAAUc,KAAV,IAAmB,IAAvB,EAA6B;AAC3B,YAAM,IAAIwB,KAAJ,CAAU,0BAAV,CAAN;AACD;AACD,SAAKtC,IAAL,CAAUc,KAAV,GAAkBA,KAAlB;AACD;AACDC,OAAKA,IAAL,EAAmB;AACjB,SAAKiB,SAAL,CAAe,MAAf;AACA,QAAI,KAAKhC,IAAL,CAAUe,IAAV,IAAkB,IAAtB,EAA4B;AAC1B,YAAM,IAAIuB,KAAJ,CAAU,yBAAV,CAAN;AACD;AACD,SAAKtC,IAAL,CAAUe,IAAV,GAAiBA,IAAjB;AACD;;AAED;;AAEAmC,gBAAc/B,OAAiB,IAA/B,EAAqC;AACnC,QAAIA,IAAJ,EAAU;AACR,WAAKA,IAAL,CAAU,SAAV;AACA,WAAKA,IAAL,CAAU,eAAV;AACA,aAAO,KAAKD,YAAL,CAAkBP,aAAzB;AACD,KAJD,MAIO;AACL;AACA,aAAO,KAAKX,IAAL,CAAUW,aAAjB;AACD;AACF;AACDwC,uBAA0B;AACxB,SAAKhC,IAAL,CAAU,MAAV;AACA,QAAI,CAAC,KAAKD,YAAL,CAAkBd,IAAvB,EAA6B;AAC3B,YAAM,IAAIkC,KAAJ,CAAU,iCAAV,CAAN;AACD;AACD,WAAO,KAAKpB,YAAL,CAAkBd,IAAlB,CAAuB,CAAvB,CAAP;AACD;AACDgD,kBAAqB;AACnB,SAAKjC,IAAL,CAAU,MAAV;AACA,QAAI,CAAC,KAAKD,YAAL,CAAkBd,IAAvB,EAA6B;AAC3B,YAAM,IAAIkC,KAAJ,CAAU,iCAAV,CAAN;AACD;AACD,WAAO,KAAKpB,YAAL,CAAkBd,IAAlB,CAAuB,CAAvB,CAAP;AACD;AACDiD,oBAAkB;AAChB,SAAKlC,IAAL,CAAU,cAAV;AACA,WAAO,KAAKD,YAAL,CAAkBf,YAAzB;AACD;AACDmD,cAAY;AACV,SAAKnC,IAAL,CAAU,QAAV;AACA,WAAO,KAAKD,YAAL,CAAkBL,MAAlB,IAA4B,CAAnC;AACD;AACD0C,2BAAyB;AACvB,SAAKpC,IAAL,CAAU,QAAV;AACA,SAAKA,IAAL,CAAU,OAAV;AACA,SAAKA,IAAL,CAAU,OAAV;AACA,SAAKA,IAAL,CAAU,MAAV;AACA,QAAIP,QAAQ,KAAKM,YAAL,CAAkBN,KAA9B;AACA,QAAIC,SAAS,KAAKK,YAAL,CAAkBL,MAAlB,IAA4B,CAAzC;AACA,QAAI2C,OAAO,KAAX;AACA,QAAI,KAAKtC,YAAL,CAAkBJ,KAAlB,IAA2B,IAA/B,EAAqC;AACnC,UAAIF,SAAS,IAAb,EAAmB;AACjBA,gBAAQ6C,KAAKC,GAAL,CAAS9C,KAAT,EAAgB,KAAKM,YAAL,CAAkBJ,KAAlC,CAAR;AACD,OAFD,MAEO;AACLF,gBAAQ,KAAKM,YAAL,CAAkBJ,KAA1B;AACD;AACF;AACD,QAAI,KAAKI,YAAL,CAAkBH,IAAlB,IAA0B,IAA9B,EAAoC;AAClC,UAAIF,SAAS,CAAT,IAAcD,SAAS,IAA3B,EAAiC;AAC/B,cAAM,IAAI0B,KAAJ,CACJ,qEADI,CAAN;AAGD;AACD,UAAI1B,SAAS,IAAb,EAAmB;AACjB,YAAI,KAAKM,YAAL,CAAkBH,IAAlB,GAAyBH,KAA7B,EAAoC;AAClCC,mBAASD,QAAQ,KAAKM,YAAL,CAAkBH,IAAnC;AACAH,kBAAQ,KAAKM,YAAL,CAAkBH,IAA1B;AACD,SAHD,MAGO;AACL;AACD;AACF,OAPD,MAOO,IAAIF,SAAS,CAAb,EAAgB;AACrB,cAAM,IAAIyB,KAAJ,CAAU,oCAAV,CAAN;AACD,OAFM,MAEA;AACL,YAAI,KAAKpB,YAAL,CAAkBR,OAAlB,CAA0BY,MAA1B,GAAmC,CAAvC,EAA0C;AACxCkC,iBAAO,IAAP;AACA5C,kBAAQ,KAAKM,YAAL,CAAkBH,IAA1B;AACD,SAHD,MAGO;AACL,gBAAM,IAAIuB,KAAJ,CAAU,oCAAV,CAAN;AACD;AACF;AACF;AACD,WAAO;AACL1B,WADK;AAELC,YAFK;AAGL2C;AAHK,KAAP;AAKD;AACDG,mBAAiB;AACf,WAAO,KAAKJ,sBAAL,GAA8B1C,MAArC;AACD;AACD+C,kBAAgB;AACd,WAAO,KAAKL,sBAAL,GAA8B3C,KAArC;AACD;AACDiD,uCAAqC;AACnC,SAAK1C,IAAL,CAAU,SAAV;AACA,WAAO,KAAKD,YAAL,CAAkBR,OAAzB;AACD;AACDoD,yBAAuB;AACrB,SAAKC,cAAL;AACA,WAAO,KAAK7C,YAAL,CAAkBhB,MAAlB,CAAyBoB,MAAhC;AACD;AACD0C,sBAAoB;AAClB,SAAKD,cAAL;AACA,WAAOlF,IAAIwB,IAAJ,CACL,KAAKa,YAAL,CAAkBhB,MAAlB,CAAyBV,GAAzB,CACE,CAAC,CAACyE,WAAD,EAAcrC,KAAd,CAAD,KACE/C,IAAI6C,QAAS,WAAUuC,WAAY,QAAOpF,IAAI4D,UAAJ,CAAeb,KAAf,CAAsB,EAFpE,CADK,EAKL,IALK,CAAP;AAOD;AACDsC,kBAAgB,EAAEC,WAAF,EAAhB,EAA4D;AAC1D,SAAKJ,cAAL;AACA,QAAIK,cAAc,KAAKlD,YAAL,CAAkBhB,MAAlB,CAAyBoB,MAAzB,GACd,KAAKF,gBAAL,CAAsB,KAAKF,YAAL,CAAkBhB,MAAxC,CADc,GAEdrB,IAAI6C,QAAS,WAAU,KAAK0B,aAAL,EAAqB,GAFhD;AAGA,QAAIe,WAAJ,EAAiB;AACfC,oBAAcvF,IAAI6C,QAAS,eAAc,KAAK0B,aAAL,EAAqB,4BAA2BgB,WAAY,OAArG;AACD;AACD,WAAOA,WAAP;AACD;AACDC,wBAAsB1B,OAAtB,EAAwC;AACtC,SAAKxB,IAAL,CAAU,YAAV;AACA,UAAMmD,UAAU,KAAKpD,YAAL,CAAkBX,UAAlB,CAA6BoC,UAAU,OAAV,GAAoB,OAAjD,CAAhB;AACA,QAAI2B,QAAQhD,MAAZ,EAAoB;AAClB,aAAOzC,IAAI6C,QAAS,IAAG7C,IAAIwB,IAAJ,CAASiE,OAAT,EAAkB,SAAlB,CAA6B,GAApD;AACD,KAFD,MAEO;AACL,aAAOzF,IAAIgD,OAAJ,CAAY,IAAZ,CAAP;AACD;AACF;AACD0C,mBACEC,iBADF,EAEEC,iBAFF,EAGE,EAAEN,WAAF,EAHF,EAIE;AACA,SAAKhD,IAAL,CAAU,OAAV;AACA,UAAMmD,UAAU,CACd,IAAIH,cACA;;;;;;;;;;;;;;;;;;AAkBA,KAACtF,IAAI6C,QAAS,QAAO,KAAK0B,aAAL,EAAqB,WAA1C,CAnBA,GAoBA,EApBJ,CADc,EAsBd,GAAG,KAAKlC,YAAL,CAAkBZ,KAtBP,EAuBd,IAAIkE,oBAAoB,CAAC,KAAKH,qBAAL,CAA2B,IAA3B,CAAD,CAApB,GAAyD,EAA7D,CAvBc,EAwBd,IAAII,oBAAoB,CAAC,KAAKJ,qBAAL,CAA2B,KAA3B,CAAD,CAApB,GAA0D,EAA9D,CAxBc,CAAhB;AA0BA,WAAOC,QAAQhD,MAAR,GACHzC,IAAI6C,QAAS,IAAG7C,IAAIwB,IAAJ,CAASiE,OAAT,EAAkB,SAAlB,CAA6B,GAD1C,GAEHzF,IAAI6C,QAAS,OAFjB;AAGD;AACDgD,QACE9E,UAKI,EANN,EAOE;AACA,UAAM;AACJ+E,eAAS,KADL;AAEJC,wBAAkB,KAFd;AAGJC,sBAAgB,KAHZ;AAIJV,oBAAc;AAJV,QAKFvE,OALJ;;AAOA,SAAKmE,cAAL;AACA,QAAIc,aAAJ,EAAmB;AACjB,aAAO,KAAKX,eAAL,CAAqB,EAAEC,WAAF,EAArB,CAAP;AACD;AACD,UAAM,EAAEvD,KAAF,EAASC,MAAT,EAAiB2C,IAAjB,KAA0B,KAAKD,sBAAL,EAAhC;AACA,UAAMlC,SACJsD,UAAUC,eAAV,GACI/F,IAAI6C,QAAS,GAAE,KAAKwC,eAAL,CAAqB,EAAEC,WAAF,EAArB,CAAsC,YADzD,GAEI,KAAKH,iBAAL,EAHN;;AAKA,QAAItC,WAAW7C,IAAI6C,QAAS;eACjBL,MAAO;QACd,KAAKH,YAAL,CAAkBd,IAAlB,IACAvB,IAAI6C,QAAS,QACX,KAAKR,YAAL,CAAkBd,IAAlB,CAAuB,CAAvB,CACD,OAAM,KAAKgD,aAAL,EAAqB,EAAE;QAC9B,KAAKlC,YAAL,CAAkBb,IAAlB,CAAuBiB,MAAvB,IAAiCzC,IAAIwB,IAAJ,CAAS,KAAKa,YAAL,CAAkBb,IAA3B,EAAiC,GAAjC,CAAsC;cACjE,KAAKkE,gBAAL,CAAsB,IAAtB,EAA4B,IAA5B,EAAkC3E,OAAlC,CAA2C;QAEjD,KAAKsB,YAAL,CAAkBR,OAAlB,CAA0BY,MAA1B,GACIzC,IAAI6C,QAAS,YAAW7C,IAAIwB,IAAJ,CACtB,KAAKa,YAAL,CAAkBR,OAAlB,CAA0BlB,GAA1B,CACE,CAAC,CAACmC,IAAD,EAAOkB,SAAP,EAAkBC,UAAlB,CAAD,KACEjE,IAAI6C,QAAS,GAAEC,IAAK,IAClBmD,OAAOjC,SAAP,IAAoBiC,OAAOtB,IAAP,CAApB,GACI3E,IAAI6C,QAAS,KADjB,GAEI7C,IAAI6C,QAAS,MAClB,GACCoB,eAAe,IAAf,GACIjE,IAAI6C,QAAS,cADjB,GAEIoB,eAAe,KAAf,GACEjE,IAAI6C,QAAS,aADf,GAEE,IACP,EAZL,CADsB,EAetB,GAfsB,CAgBtB,EAjBN,GAkBI,EACL;QACC,6BAAcd,KAAd,KAAwB/B,IAAI6C,QAAS,SAAQ7C,IAAIgD,OAAJ,CAAYjB,KAAZ,CAAmB,EAAE;QAClEC,UAAUhC,IAAI6C,QAAS,UAAS7C,IAAIgD,OAAJ,CAAYhB,MAAZ,CAAoB,EAAE;KA9B1D;AAgCA,QAAI2C,IAAJ,EAAU;AACR,YAAMuB,YAAYrC,QAAlB;AACAhB,iBAAW7C,IAAI6C,QAAS;eACf7C,IAAI4D,UAAJ,CAAesC,SAAf,CAA0B;YAC7BrD,QAAS;;;eAGN7C,IAAI4D,UAAJ,CAAesC,SAAf,CAA0B;;SALnC;AAQD;AACD,QAAIH,eAAJ,EAAqB;AACnB,YAAMI,WAAWtC,QAAjB;AACAhB,iBAAW7C,IAAI6C,QAAS,mBAAkB7C,IAAI4D,UAAJ,CACxCuC,QADwC,EAExC,QAFwC,CAGxC,WAAUtD,QAAS,QAAO7C,IAAI4D,UAAJ,CAAeuC,QAAf,CAAyB,EAHrD;AAIAtD,iBAAW7C,IAAI6C,QAAS,oBAAmBA,QAAS,gBAApD;AACD;AACD,WAAOA,QAAP;AACD;;AAED;;AAEAuD,cAAY;AACV,SAAKlF,SAAL,GAAiB,IAAjB;AACD;AACDoB,OAAK+D,IAAL,EAAmB;AACjB,QAAI,KAAKpF,KAAL,CAAWoF,IAAX,CAAJ,EAAsB;AACtB,UAAMC,aAAa,OAAO;AACxBC,oBAAc;AADU,KAAP,CAAnB;AAGA,UAAMC,cAAc,KAAKrF,IAAL,CAAUgB,UAAV,CAAqBkE,IAArB,CAApB;AACA,SAAKlF,IAAL,CAAUgB,UAAV,CAAqBkE,IAArB,IAA6B,EAA7B;AACA,SAAK,MAAMnD,EAAX,IAAiBsD,eAAe,EAAhC,EAAoC;AAClCtD;AACD;AACD,SAAKjC,KAAL,CAAWoF,IAAX,IAAmBpG,QAAQ,IAAIwD,KAAJ,CAAU,sBAAV,EAAkCgD,KAA1C,GAAkD,IAArE;AACA,QAAIJ,SAAS,kBAAb,EAAiC;AAC/B;AACA,WAAKhE,YAAL,CAAkBgE,IAAlB,IAA0B,KAAKlF,IAAL,CAAUkF,IAAV,CAA1B;AACD,KAHD,MAGO,IAAIA,SAAS,YAAb,EAA2B;AAChC;AACA,YAAM9F,UAAU+F,YAAhB;AACA,WAAKjE,YAAL,CAAkBgE,IAAlB,EAAwB1E,KAAxB,GAAgCnB,qBAC9B,KAAKW,IAAL,CAAUkF,IAAV,EAAgB1E,KADc,EAE9BpB,OAF8B,CAAhC;AAIA,WAAK8B,YAAL,CAAkBgE,IAAlB,EAAwBzE,KAAxB,GAAgCpB,qBAC9B,KAAKW,IAAL,CAAUkF,IAAV,EAAgBzE,KADc,EAE9BrB,OAF8B,CAAhC;AAID,KAXM,MAWA,IAAI8F,SAAS,QAAb,EAAuB;AAC5B;AACA,YAAMK,aAAa,EAAnB;AACA,YAAMnG,UAAU+F,YAAhB;AACA,WAAKjE,YAAL,CAAkBgE,IAAlB,IAA0B,KAAKlF,IAAL,CAAUkF,IAAV,EAAgBM,MAAhB,CAAuB,CAACC,IAAD,EAAO,CAACC,CAAD,EAAIC,CAAJ,CAAP,KAAkB;AACjE;AACA,YAAI,CAACJ,WAAWI,CAAX,CAAL,EAAoB;AAClB;AACAJ,qBAAWI,CAAX,IAAgB,IAAhB;AACAF,eAAKxD,IAAL,CAAU,CAAC/C,gBAAgBwG,CAAhB,EAAmBtG,OAAnB,CAAD,EAA8BuG,CAA9B,CAAV;AACD;AACD,eAAOF,IAAP;AACD,OARyB,EAQvB,EARuB,CAA1B;AASD,KAbM,MAaA,IAAIP,SAAS,SAAb,EAAwB;AAC7B,YAAM9F,UAAU+F,YAAhB;AACA,WAAKjE,YAAL,CAAkBgE,IAAlB,IAA0B,KAAKlF,IAAL,CAAUkF,IAAV,EAAgB1F,GAAhB,CAAoB,CAAC,CAACkG,CAAD,EAAIC,CAAJ,EAAOC,CAAP,CAAD,KAAe,CAC3D1G,gBAAgBwG,CAAhB,EAAmBtG,OAAnB,CAD2D,EAE3DuG,CAF2D,EAG3DC,CAH2D,CAAnC,CAA1B;AAKD,KAPM,MAOA,IAAIV,SAAS,MAAb,EAAqB;AAC1B,UAAI,KAAKlF,IAAL,CAAUI,IAAd,EAAoB;AAClB,cAAMyF,IAAI,KAAK7F,IAAL,CAAUI,IAApB;AACA,cAAMhB,UAAU+F,YAAhB;AACA,aAAKjE,YAAL,CAAkBd,IAAlB,GAAyB,CAAClB,gBAAgB2G,EAAE,CAAF,CAAhB,EAAsBzG,OAAtB,CAAD,EAAiCyG,EAAE,CAAF,CAAjC,CAAzB;AACD;AACF,KANM,MAMA,IAAIX,SAAS,MAAT,IAAmBA,SAAS,OAAhC,EAAyC;AAC9C,YAAM9F,UAAU+F,YAAhB;AACA,WAAKjE,YAAL,CAAkBgE,IAAlB,IAA0B7F,qBAAqB,KAAKW,IAAL,CAAUkF,IAAV,CAArB,EAAsC9F,OAAtC,CAA1B;AACD,KAHM,MAGA,IAAI8F,SAAS,cAAb,EAA6B;AAClC,YAAM9F,UAAU+F,YAAhB;AACA,WAAKjE,YAAL,CAAkBgE,IAAlB,IAA0BhG,gBAAgB,KAAKc,IAAL,CAAUkF,IAAV,CAAhB,EAAiC9F,OAAjC,CAA1B;AACD,KAHM,MAGA,IAAI8F,SAAS,cAAb,EAA6B;AAClC,WAAKhE,YAAL,CAAkBgE,IAAlB,IAA0B,KAAKlF,IAAL,CAAUkF,IAAV,CAA1B;AACD,KAFM,MAEA,IAAIA,SAAS,eAAb,EAA8B;AACnC,WAAKhE,YAAL,CAAkBgE,IAAlB,IAA0B,KAAKlF,IAAL,CAAUkF,IAAV,CAA1B;AACD,KAFM,MAEA,IAAIA,SAAS,OAAb,EAAsB;AAC3B,YAAM9F,UAAU+F,YAAhB;AACA,WAAKjE,YAAL,CAAkBgE,IAAlB,IAA0BhG,gBAAgB,KAAKc,IAAL,CAAUkF,IAAV,CAAhB,EAAiC9F,OAAjC,CAA1B;AACD,KAHM,MAGA,IAAI8F,SAAS,QAAb,EAAuB;AAC5B,YAAM9F,UAAU+F,YAAhB;AACA,WAAKjE,YAAL,CAAkBgE,IAAlB,IAA0BhG,gBAAgB,KAAKc,IAAL,CAAUkF,IAAV,CAAhB,EAAiC9F,OAAjC,CAA1B;AACD,KAHM,MAGA,IAAI8F,SAAS,OAAb,EAAsB;AAC3B,WAAKhE,YAAL,CAAkBgE,IAAlB,IAA0B,KAAKlF,IAAL,CAAUkF,IAAV,CAA1B;AACD,KAFM,MAEA,IAAIA,SAAS,MAAb,EAAqB;AAC1B,WAAKhE,YAAL,CAAkBgE,IAAlB,IAA0B,KAAKlF,IAAL,CAAUkF,IAAV,CAA1B;AACD,KAFM,MAEA;AACL,YAAM,IAAI5C,KAAJ,CAAW,6BAA4B4C,IAAK,GAA5C,CAAN;AACD;AACF;AACDlD,YAAUkD,IAAV,EAAwB;AACtB,QAAI,KAAKpF,KAAL,CAAWoF,IAAX,CAAJ,EAAsB;AACpB,UAAI,OAAO,KAAKpF,KAAL,CAAWoF,IAAX,CAAP,KAA4B,QAAhC,EAA0C;AACxC,cAAM,IAAI5C,KAAJ,CACH,IAAG4C,IAAK,iCAAT,GACE,KAAKpF,KAAL,CAAWoF,IAAX,EAAiBY,OAAjB,CAAyB,KAAzB,EAAgC,QAAhC,CADF,GAEE,IAHE,CAAN;AAKD;AACD,YAAM,IAAIxD,KAAJ,CAAW,IAAG4C,IAAK,2BAAnB,CAAN;AACD;AACF;AACDnB,mBAAiB;AACf,SAAKkB,SAAL;AACA;AACA,SAAK9D,IAAL,CAAU,MAAV;AACA,SAAKA,IAAL,CAAU,MAAV;AACA,SAAKA,IAAL,CAAU,SAAV;AACA;AACA,SAAKA,IAAL,CAAU,kBAAV;AACA,SAAKA,IAAL,CAAU,YAAV;AACA,SAAKA,IAAL,CAAU,OAAV;AACA;AACA,SAAKA,IAAL,CAAU,QAAV;AACA,SAAKA,IAAL,CAAU,OAAV;AACA,SAAKA,IAAL,CAAU,OAAV;AACA,SAAKA,IAAL,CAAU,MAAV;AACA;AACA,SAAKA,IAAL,CAAU,cAAV;AACA,SAAKA,IAAL,CAAU,QAAV;AACD;AApmBgB;;kBAumBJzB,Y","file":"QueryBuilder.js","sourcesContent":["// @flow\nimport * as sql from \"pg-sql2\";\nimport type { SQL } from \"pg-sql2\";\nimport isSafeInteger from \"lodash/isSafeInteger\";\nimport chunk from \"lodash/chunk\";\n\nconst isDev = process.env.POSTGRAPHILE_ENV === \"development\";\n\ntype GenContext = {\n  queryBuilder: QueryBuilder,\n};\ntype Gen<T> = (context: GenContext) => T;\n\nfunction callIfNecessary<T>(o: Gen<T> | T, context: GenContext): T {\n  if (typeof o === \"function\") {\n    return o(context);\n  } else {\n    return o;\n  }\n}\n\nfunction callIfNecessaryArray<T>(\n  o: Array<Gen<T> | T>,\n  context: GenContext\n): Array<T> {\n  if (Array.isArray(o)) {\n    return o.map(v => callIfNecessary(v, context));\n  } else {\n    return o;\n  }\n}\n\nexport type RawAlias = Symbol | string;\ntype SQLAlias = SQL;\ntype SQLGen = Gen<SQL> | SQL;\ntype NumberGen = Gen<number> | number;\ntype CursorValue = {};\ntype CursorComparator = (val: CursorValue, isAfter: boolean) => void;\n\nexport type QueryBuilderOptions = {\n  supportsJSONB?: boolean, // Defaults to true\n};\n\nclass QueryBuilder {\n  supportsJSONB: boolean;\n  locks: {\n    [string]: true | string,\n  };\n  finalized: boolean;\n  data: {\n    cursorPrefix: Array<string>,\n    select: Array<[SQLGen, RawAlias]>,\n    selectCursor: ?SQLGen,\n    from: ?[SQLGen, SQLAlias],\n    join: Array<SQLGen>,\n    where: Array<SQLGen>,\n    whereBound: {\n      lower: Array<SQLGen>,\n      upper: Array<SQLGen>,\n    },\n    orderBy: Array<[SQLGen, boolean, boolean | null]>,\n    orderIsUnique: boolean,\n    limit: ?NumberGen,\n    offset: ?NumberGen,\n    first: ?number,\n    last: ?number,\n    beforeLock: {\n      [string]: Array<() => void>,\n    },\n    cursorComparator: ?CursorComparator,\n  };\n  compiledData: {\n    cursorPrefix: Array<string>,\n    select: Array<[SQL, RawAlias]>,\n    selectCursor: ?SQL,\n    from: ?[SQL, SQLAlias],\n    join: Array<SQL>,\n    where: Array<SQL>,\n    whereBound: {\n      lower: Array<SQL>,\n      upper: Array<SQL>,\n    },\n    orderBy: Array<[SQL, boolean, boolean | null]>,\n    orderIsUnique: boolean,\n    limit: ?number,\n    offset: ?number,\n    first: ?number,\n    last: ?number,\n    cursorComparator: ?CursorComparator,\n  };\n\n  constructor(options: QueryBuilderOptions = {}) {\n    this.supportsJSONB =\n      options.supportsJSONB == null ? true : !!options.supportsJSONB;\n\n    this.locks = {};\n    this.finalized = false;\n    this.data = {\n      // TODO: refactor `cursorPrefix`, it shouldn't be here (or should at least have getters/setters)\n      cursorPrefix: [\"natural\"],\n      select: [],\n      selectCursor: null,\n      from: null,\n      join: [],\n      where: [],\n      whereBound: {\n        lower: [],\n        upper: [],\n      },\n      orderBy: [],\n      orderIsUnique: false,\n      limit: null,\n      offset: null,\n      first: null,\n      last: null,\n      beforeLock: {},\n      cursorComparator: null,\n    };\n    this.compiledData = {\n      cursorPrefix: [\"natural\"],\n      select: [],\n      selectCursor: null,\n      from: null,\n      join: [],\n      where: [],\n      whereBound: {\n        lower: [],\n        upper: [],\n      },\n      orderBy: [],\n      orderIsUnique: false,\n      limit: null,\n      offset: null,\n      first: null,\n      last: null,\n      cursorComparator: null,\n    };\n    this.beforeLock(\"select\", () => {\n      this.lock(\"selectCursor\");\n      if (this.compiledData.selectCursor) {\n        this.select(this.compiledData.selectCursor, \"__cursor\");\n      }\n    });\n    // 'whereBound' and 'natural' order might set offset/limit\n    this.beforeLock(\"where\", () => {\n      this.lock(\"whereBound\");\n    });\n    this.beforeLock(\"offset\", () => {\n      this.lock(\"whereBound\");\n    });\n    this.beforeLock(\"limit\", () => {\n      this.lock(\"whereBound\");\n    });\n    this.beforeLock(\"first\", () => {\n      this.lock(\"limit\");\n      this.lock(\"offset\");\n    });\n    this.beforeLock(\"last\", () => {\n      this.lock(\"limit\");\n      this.lock(\"offset\");\n    });\n  }\n\n  // ----------------------------------------\n\n  // Helper function\n  jsonbBuildObject(fields: Array<[SQL, RawAlias]>) {\n    if (this.supportsJSONB && fields.length > 50) {\n      const fieldsChunks = chunk(fields, 50);\n      const chunkToJson = fieldsChunk =>\n        sql.fragment`jsonb_build_object(${sql.join(\n          fieldsChunk.map(\n            ([expr, alias]) =>\n              sql.fragment`${sql.literal(alias)}::text, ${expr}`\n          ),\n          \", \"\n        )})`;\n      return sql.fragment`(${sql.join(\n        fieldsChunks.map(chunkToJson),\n        \" || \"\n      )})::json`;\n    } else {\n      // PG9.4 will have issues with more than 100 parameters (50 keys)\n      return sql.fragment`json_build_object(${sql.join(\n        fields.map(\n          ([expr, alias]) => sql.fragment`${sql.literal(alias)}::text, ${expr}`\n        ),\n        \", \"\n      )})`;\n    }\n  }\n\n  // ----------------------------------------\n\n  beforeLock(field: string, fn: () => void) {\n    this.checkLock(field);\n    this.data.beforeLock[field] = this.data.beforeLock[field] || [];\n    this.data.beforeLock[field].push(fn);\n  }\n  setCursorComparator(fn: CursorComparator) {\n    this.checkLock(\"cursorComparator\");\n    this.data.cursorComparator = fn;\n    this.lock(\"cursorComparator\");\n  }\n  addCursorCondition(cursorValue: CursorValue, isAfter: boolean) {\n    this.beforeLock(\"whereBound\", () => {\n      this.lock(\"cursorComparator\");\n      if (!this.compiledData.cursorComparator) {\n        throw new Error(\"No cursor comparator was set!\");\n      }\n      this.compiledData.cursorComparator(cursorValue, isAfter);\n    });\n  }\n  select(exprGen: SQLGen, alias: RawAlias) {\n    this.checkLock(\"select\");\n    if (typeof alias === \"string\") {\n      // To protect against vulnerabilities such as\n      //\n      // https://github.com/brianc/node-postgres/issues/1408\n      //\n      // we need to ensure column names are safe. Turns out that GraphQL\n      // aliases are fairly strict (`[_A-Za-z][_0-9A-Za-z]*`) anyway:\n      //\n      // https://github.com/graphql/graphql-js/blob/680685dd14bd52c6475305e150e5f295ead2aa7e/src/language/lexer.js#L551-L581\n      //\n      // so this should not cause any issues in practice.\n      if (/^(\\$+|@+|[_A-Za-z])[_0-9A-Za-z]*$/.test(alias) !== true) {\n        throw new Error(`Disallowed alias '${alias}'.`);\n      }\n    }\n    this.data.select.push([exprGen, alias]);\n  }\n  selectCursor(exprGen: SQLGen) {\n    this.checkLock(\"selectCursor\");\n    this.data.selectCursor = exprGen;\n  }\n  from(expr: SQLGen, alias?: SQLAlias = sql.identifier(Symbol())) {\n    this.checkLock(\"from\");\n    if (!expr) {\n      throw new Error(\"No from table source!\");\n    }\n    if (!alias) {\n      throw new Error(\"No from alias!\");\n    }\n    this.data.from = [expr, alias];\n    this.lock(\"from\");\n  }\n  // XXX: join\n  where(exprGen: SQLGen) {\n    this.checkLock(\"where\");\n    this.data.where.push(exprGen);\n  }\n  whereBound(exprGen: SQLGen, isLower: boolean) {\n    if (typeof isLower !== \"boolean\") {\n      throw new Error(\"isLower must be specified as a boolean\");\n    }\n    this.checkLock(\"whereBound\");\n    this.data.whereBound[isLower ? \"lower\" : \"upper\"].push(exprGen);\n  }\n  setOrderIsUnique() {\n    this.data.orderIsUnique = true;\n  }\n  orderBy(\n    exprGen: SQLGen,\n    ascending: boolean = true,\n    nullsFirst: boolean | null\n  ) {\n    this.checkLock(\"orderBy\");\n    this.data.orderBy.push([exprGen, ascending, nullsFirst]);\n  }\n  limit(limitGen: NumberGen) {\n    this.checkLock(\"limit\");\n\n    if (this.data.limit != null) {\n      throw new Error(\"Must only set limit once\");\n    }\n    this.data.limit = limitGen;\n  }\n  offset(offsetGen: NumberGen) {\n    this.checkLock(\"offset\");\n    if (this.data.offset != null) {\n      // Add the offsets together (this should be able to recurse)\n      const previous = this.data.offset;\n      this.data.offset = context => {\n        return (\n          callIfNecessary(previous, context) +\n          callIfNecessary(offsetGen, context)\n        );\n      };\n    } else {\n      this.data.offset = offsetGen;\n    }\n  }\n  first(first: number) {\n    this.checkLock(\"first\");\n    if (this.data.first != null) {\n      throw new Error(\"Must only set first once\");\n    }\n    this.data.first = first;\n  }\n  last(last: number) {\n    this.checkLock(\"last\");\n    if (this.data.last != null) {\n      throw new Error(\"Must only set last once\");\n    }\n    this.data.last = last;\n  }\n\n  // ----------------------------------------\n\n  isOrderUnique(lock?: boolean = true) {\n    if (lock) {\n      this.lock(\"orderBy\");\n      this.lock(\"orderIsUnique\");\n      return this.compiledData.orderIsUnique;\n    } else {\n      // This is useful inside `beforeLock(\"orderBy\", ...)` calls\n      return this.data.orderIsUnique;\n    }\n  }\n  getTableExpression(): SQL {\n    this.lock(\"from\");\n    if (!this.compiledData.from) {\n      throw new Error(\"No from table has been supplied\");\n    }\n    return this.compiledData.from[0];\n  }\n  getTableAlias(): SQL {\n    this.lock(\"from\");\n    if (!this.compiledData.from) {\n      throw new Error(\"No from table has been supplied\");\n    }\n    return this.compiledData.from[1];\n  }\n  getSelectCursor() {\n    this.lock(\"selectCursor\");\n    return this.compiledData.selectCursor;\n  }\n  getOffset() {\n    this.lock(\"offset\");\n    return this.compiledData.offset || 0;\n  }\n  getFinalLimitAndOffset() {\n    this.lock(\"offset\");\n    this.lock(\"limit\");\n    this.lock(\"first\");\n    this.lock(\"last\");\n    let limit = this.compiledData.limit;\n    let offset = this.compiledData.offset || 0;\n    let flip = false;\n    if (this.compiledData.first != null) {\n      if (limit != null) {\n        limit = Math.min(limit, this.compiledData.first);\n      } else {\n        limit = this.compiledData.first;\n      }\n    }\n    if (this.compiledData.last != null) {\n      if (offset > 0 && limit != null) {\n        throw new Error(\n          \"Issue within pagination, please report your query to graphile-build\"\n        );\n      }\n      if (limit != null) {\n        if (this.compiledData.last < limit) {\n          offset = limit - this.compiledData.last;\n          limit = this.compiledData.last;\n        } else {\n          // no need to change anything\n        }\n      } else if (offset > 0) {\n        throw new Error(\"Cannot combine 'last' and 'offset'\");\n      } else {\n        if (this.compiledData.orderBy.length > 0) {\n          flip = true;\n          limit = this.compiledData.last;\n        } else {\n          throw new Error(\"Cannot do last of an unordered set\");\n        }\n      }\n    }\n    return {\n      limit,\n      offset,\n      flip,\n    };\n  }\n  getFinalOffset() {\n    return this.getFinalLimitAndOffset().offset;\n  }\n  getFinalLimit() {\n    return this.getFinalLimitAndOffset().limit;\n  }\n  getOrderByExpressionsAndDirections() {\n    this.lock(\"orderBy\");\n    return this.compiledData.orderBy;\n  }\n  getSelectFieldsCount() {\n    this.lockEverything();\n    return this.compiledData.select.length;\n  }\n  buildSelectFields() {\n    this.lockEverything();\n    return sql.join(\n      this.compiledData.select.map(\n        ([sqlFragment, alias]) =>\n          sql.fragment`to_json(${sqlFragment}) as ${sql.identifier(alias)}`\n      ),\n      \", \"\n    );\n  }\n  buildSelectJson({ addNullCase }: { addNullCase?: boolean }) {\n    this.lockEverything();\n    let buildObject = this.compiledData.select.length\n      ? this.jsonbBuildObject(this.compiledData.select)\n      : sql.fragment`to_json(${this.getTableAlias()})`;\n    if (addNullCase) {\n      buildObject = sql.fragment`(case when (${this.getTableAlias()} is null) then null else ${buildObject} end)`;\n    }\n    return buildObject;\n  }\n  buildWhereBoundClause(isLower: boolean) {\n    this.lock(\"whereBound\");\n    const clauses = this.compiledData.whereBound[isLower ? \"lower\" : \"upper\"];\n    if (clauses.length) {\n      return sql.fragment`(${sql.join(clauses, \") and (\")})`;\n    } else {\n      return sql.literal(true);\n    }\n  }\n  buildWhereClause(\n    includeLowerBound: boolean,\n    includeUpperBound: boolean,\n    { addNullCase }: { addNullCase?: boolean }\n  ) {\n    this.lock(\"where\");\n    const clauses = [\n      ...(addNullCase\n        ? /*\n           * Okay... so this is quite interesting. When we're talking about\n           * composite types, `(foo is not null)` and `not (foo is null)` are\n           * NOT equivalent! Here's why:\n           *\n           * `(foo is null)`\n           *   true if every field of the row is null\n           *\n           * `(foo is not null)`\n           *   true if every field of the row is not null\n           *\n           * `not (foo is null)`\n           *   true if there's at least one field that is not null\n           *\n           * So don't \"simplify\" the line below! We're probably checking if\n           * the result of a function call returning a compound type was\n           * indeed null.\n           */\n          [sql.fragment`not (${this.getTableAlias()} is null)`]\n        : []),\n      ...this.compiledData.where,\n      ...(includeLowerBound ? [this.buildWhereBoundClause(true)] : []),\n      ...(includeUpperBound ? [this.buildWhereBoundClause(false)] : []),\n    ];\n    return clauses.length\n      ? sql.fragment`(${sql.join(clauses, \") and (\")})`\n      : sql.fragment`1 = 1`;\n  }\n  build(\n    options: {\n      asJson?: boolean,\n      asJsonAggregate?: boolean,\n      onlyJsonField?: boolean,\n      addNullCase?: boolean,\n    } = {}\n  ) {\n    const {\n      asJson = false,\n      asJsonAggregate = false,\n      onlyJsonField = false,\n      addNullCase = false,\n    } = options;\n\n    this.lockEverything();\n    if (onlyJsonField) {\n      return this.buildSelectJson({ addNullCase });\n    }\n    const { limit, offset, flip } = this.getFinalLimitAndOffset();\n    const fields =\n      asJson || asJsonAggregate\n        ? sql.fragment`${this.buildSelectJson({ addNullCase })} as object`\n        : this.buildSelectFields();\n\n    let fragment = sql.fragment`\n      select ${fields}\n      ${this.compiledData.from &&\n        sql.fragment`from ${\n          this.compiledData.from[0]\n        } as ${this.getTableAlias()}`}\n      ${this.compiledData.join.length && sql.join(this.compiledData.join, \" \")}\n      where ${this.buildWhereClause(true, true, options)}\n      ${\n        this.compiledData.orderBy.length\n          ? sql.fragment`order by ${sql.join(\n              this.compiledData.orderBy.map(\n                ([expr, ascending, nullsFirst]) =>\n                  sql.fragment`${expr} ${\n                    Number(ascending) ^ Number(flip)\n                      ? sql.fragment`ASC`\n                      : sql.fragment`DESC`\n                  }${\n                    nullsFirst === true\n                      ? sql.fragment` NULLS FIRST`\n                      : nullsFirst === false\n                        ? sql.fragment` NULLS LAST`\n                        : null\n                  }`\n              ),\n              \",\"\n            )}`\n          : \"\"\n      }\n      ${isSafeInteger(limit) && sql.fragment`limit ${sql.literal(limit)}`}\n      ${offset && sql.fragment`offset ${sql.literal(offset)}`}\n    `;\n    if (flip) {\n      const flipAlias = Symbol();\n      fragment = sql.fragment`\n        with ${sql.identifier(flipAlias)} as (\n          ${fragment}\n        )\n        select *\n        from ${sql.identifier(flipAlias)}\n        order by (row_number() over (partition by 1)) desc\n        `;\n    }\n    if (asJsonAggregate) {\n      const aggAlias = Symbol();\n      fragment = sql.fragment`select json_agg(${sql.identifier(\n        aggAlias,\n        \"object\"\n      )}) from (${fragment}) as ${sql.identifier(aggAlias)}`;\n      fragment = sql.fragment`select coalesce((${fragment}), '[]'::json)`;\n    }\n    return fragment;\n  }\n\n  // ----------------------------------------\n\n  _finalize() {\n    this.finalized = true;\n  }\n  lock(type: string) {\n    if (this.locks[type]) return;\n    const getContext = () => ({\n      queryBuilder: this,\n    });\n    const beforeLocks = this.data.beforeLock[type];\n    this.data.beforeLock[type] = [];\n    for (const fn of beforeLocks || []) {\n      fn();\n    }\n    this.locks[type] = isDev ? new Error(\"Initally locked here\").stack : true;\n    if (type === \"cursorComparator\") {\n      // It's meant to be a function\n      this.compiledData[type] = this.data[type];\n    } else if (type === \"whereBound\") {\n      // Handle properties separately\n      const context = getContext();\n      this.compiledData[type].lower = callIfNecessaryArray(\n        this.data[type].lower,\n        context\n      );\n      this.compiledData[type].upper = callIfNecessaryArray(\n        this.data[type].upper,\n        context\n      );\n    } else if (type === \"select\") {\n      // Assume that duplicate fields must be identical, don't output the same key multiple times\n      const seenFields = {};\n      const context = getContext();\n      this.compiledData[type] = this.data[type].reduce((memo, [a, b]) => {\n        // $FlowFixMe\n        if (!seenFields[b]) {\n          // $FlowFixMe\n          seenFields[b] = true;\n          memo.push([callIfNecessary(a, context), b]);\n        }\n        return memo;\n      }, []);\n    } else if (type === \"orderBy\") {\n      const context = getContext();\n      this.compiledData[type] = this.data[type].map(([a, b, c]) => [\n        callIfNecessary(a, context),\n        b,\n        c,\n      ]);\n    } else if (type === \"from\") {\n      if (this.data.from) {\n        const f = this.data.from;\n        const context = getContext();\n        this.compiledData.from = [callIfNecessary(f[0], context), f[1]];\n      }\n    } else if (type === \"join\" || type === \"where\") {\n      const context = getContext();\n      this.compiledData[type] = callIfNecessaryArray(this.data[type], context);\n    } else if (type === \"selectCursor\") {\n      const context = getContext();\n      this.compiledData[type] = callIfNecessary(this.data[type], context);\n    } else if (type === \"cursorPrefix\") {\n      this.compiledData[type] = this.data[type];\n    } else if (type === \"orderIsUnique\") {\n      this.compiledData[type] = this.data[type];\n    } else if (type === \"limit\") {\n      const context = getContext();\n      this.compiledData[type] = callIfNecessary(this.data[type], context);\n    } else if (type === \"offset\") {\n      const context = getContext();\n      this.compiledData[type] = callIfNecessary(this.data[type], context);\n    } else if (type === \"first\") {\n      this.compiledData[type] = this.data[type];\n    } else if (type === \"last\") {\n      this.compiledData[type] = this.data[type];\n    } else {\n      throw new Error(`Wasn't expecting to lock '${type}'`);\n    }\n  }\n  checkLock(type: string) {\n    if (this.locks[type]) {\n      if (typeof this.locks[type] === \"string\") {\n        throw new Error(\n          `'${type}' has already been locked\\n    ` +\n            this.locks[type].replace(/\\n/g, \"\\n    \") +\n            \"\\n\"\n        );\n      }\n      throw new Error(`'${type}' has already been locked`);\n    }\n  }\n  lockEverything() {\n    this._finalize();\n    // We must execute everything after `from` so we have the alias to reference\n    this.lock(\"from\");\n    this.lock(\"join\");\n    this.lock(\"orderBy\");\n    // We must execute where after orderBy because cursor queries require all orderBy columns\n    this.lock(\"cursorComparator\");\n    this.lock(\"whereBound\");\n    this.lock(\"where\");\n    // 'where' -> 'whereBound' can affect 'offset'/'limit'\n    this.lock(\"offset\");\n    this.lock(\"limit\");\n    this.lock(\"first\");\n    this.lock(\"last\");\n    // We must execute select after orderBy otherwise we cannot generate a cursor\n    this.lock(\"selectCursor\");\n    this.lock(\"select\");\n  }\n}\n\nexport default QueryBuilder;\n"]}