{"version":3,"sources":["../../src/plugins/sqlField.js"],"names":["sqlField","build","fieldWithHooks","fieldName","fieldSpec","fieldScope","whereFrom","sqlBuilder","getTableAlias","options","type","FieldType","pgSql","sql","pgQueryFromResolveData","queryFromResolveData","getSafeAliasFromAlias","getSafeAliasFromResolveInfo","getDataFromParsedResolveInfoFragment","addDataGenerator","parsedResolveInfoFragment","safeAlias","alias","pgQuery","queryBuilder","select","resolveData","tableAlias","identifier","Symbol","query","onlyJsonField","asJson","innerQueryBuilder","parentQueryBuilder","withQueryBuilder","fragment","resolve","data","_args","_context","resolveInfo"],"mappings":";;;;;kBAAwBA,Q;AAAT,SAASA,QAAT,CACbC,KADa,EAEbC,cAFa,EAGbC,SAHa,EAIbC,SAJa,EAKbC,aAAa,EALA,EAMbC,YAAYC,cAAcA,WAAWC,aAAX,EANb,EAObC,UAAU,EAPG,EAQb;AACA,QAAM,EAAEC,MAAMC,SAAR,KAAsBP,SAA5B;AACA,QAAM;AACJQ,WAAOC,GADH;AAEJC,4BAAwBC,oBAFpB;AAGJC,yBAHI;AAIJC;AAJI,MAKFhB,KALJ;AAMA,SAAOC,eACLC,SADK,EAEL,CAAC,EAAEe,oCAAF,EAAwCC,gBAAxC,EAAD,KAAgE;AAC9DA,qBAAiBC,6BAA6B;AAC5C,YAAMC,YAAYL,sBAChBI,0BAA0BE,KADV,CAAlB;AAGA,aAAO;AACLC,iBAASC,gBAAgB;AACvBA,uBAAaC,MAAb,CAAoB,MAAM;AACxB,kBAAMC,cAAcR,qCAClBE,yBADkB,EAElBT,SAFkB,CAApB;AAIA,kBAAMgB,aACJrB,cAAc,KAAd,GACIkB,aAAahB,aAAb,EADJ,GAEIK,IAAIe,UAAJ,CAAeC,QAAf,CAHN;AAIA,kBAAMC,QAAQf,qBACZT,YAAYA,UAAUkB,YAAV,CAAZ,GAAsCX,IAAIe,UAAJ,CAAeC,QAAf,CAD1B,EAEZF,UAFY,EAGZD,WAHY,EAIZpB,cAAc,KAAd,GACI,EAAEyB,eAAe,IAAjB,EADJ,GAEI,EAAEC,QAAQ,IAAV,EANQ,EAOZC,qBAAqB;AACnBA,gCAAkBC,kBAAlB,GAAuCV,YAAvC;AACA,kBAAI,OAAOf,QAAQ0B,gBAAf,KAAoC,UAAxC,EAAoD;AAClD1B,wBAAQ0B,gBAAR,CAAyBF,iBAAzB,EAA4C;AAC1Cb;AAD0C,iBAA5C;AAGD;AACF,aAdW,CAAd;AAgBA,mBAAOP,IAAIuB,QAAS,IAAGN,KAAM,GAA7B;AACD,WA1BD,EA0BGT,SA1BH;AA2BD;AA7BI,OAAP;AA+BD,KAnCD;;AAqCA,WAAO;AACLgB,cAAQC,IAAR,EAAcC,KAAd,EAAqBC,QAArB,EAA+BC,WAA/B,EAA4C;AAC1C,cAAMpB,YAAYJ,4BAA4BwB,WAA5B,CAAlB;AACA,eAAOH,KAAKA,IAAL,CAAUjB,SAAV,CAAP;AACD,OAJI;AAKL,SAAGjB;AALE,KAAP;AAOD,GA/CI,EAgDLC,UAhDK,CAAP;AAkDD","file":"sqlField.js","sourcesContent":["export default function sqlField(\n  build,\n  fieldWithHooks,\n  fieldName,\n  fieldSpec,\n  fieldScope = {},\n  whereFrom = sqlBuilder => sqlBuilder.getTableAlias(),\n  options = {}\n) {\n  const { type: FieldType } = fieldSpec;\n  const {\n    pgSql: sql,\n    pgQueryFromResolveData: queryFromResolveData,\n    getSafeAliasFromAlias,\n    getSafeAliasFromResolveInfo,\n  } = build;\n  return fieldWithHooks(\n    fieldName,\n    ({ getDataFromParsedResolveInfoFragment, addDataGenerator }) => {\n      addDataGenerator(parsedResolveInfoFragment => {\n        const safeAlias = getSafeAliasFromAlias(\n          parsedResolveInfoFragment.alias\n        );\n        return {\n          pgQuery: queryBuilder => {\n            queryBuilder.select(() => {\n              const resolveData = getDataFromParsedResolveInfoFragment(\n                parsedResolveInfoFragment,\n                FieldType\n              );\n              const tableAlias =\n                whereFrom === false\n                  ? queryBuilder.getTableAlias()\n                  : sql.identifier(Symbol());\n              const query = queryFromResolveData(\n                whereFrom ? whereFrom(queryBuilder) : sql.identifier(Symbol()),\n                tableAlias,\n                resolveData,\n                whereFrom === false\n                  ? { onlyJsonField: true }\n                  : { asJson: true },\n                innerQueryBuilder => {\n                  innerQueryBuilder.parentQueryBuilder = queryBuilder;\n                  if (typeof options.withQueryBuilder === \"function\") {\n                    options.withQueryBuilder(innerQueryBuilder, {\n                      parsedResolveInfoFragment,\n                    });\n                  }\n                }\n              );\n              return sql.fragment`(${query})`;\n            }, safeAlias);\n          },\n        };\n      });\n\n      return {\n        resolve(data, _args, _context, resolveInfo) {\n          const safeAlias = getSafeAliasFromResolveInfo(resolveInfo);\n          return data.data[safeAlias];\n        },\n        ...fieldSpec,\n      };\n    },\n    fieldScope\n  );\n}\n"]}