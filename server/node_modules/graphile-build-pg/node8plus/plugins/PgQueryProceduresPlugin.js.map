{"version":3,"sources":["../../src/plugins/PgQueryProceduresPlugin.js"],"names":["PgQueryProceduresPlugin","builder","pgSimpleCollections","hasConnections","hasSimpleCollections","hook","fields","build","context","extend","inflection","pgIntrospectionResultsByKind","introspectionResultsByKind","pgMakeProcField","makeProcField","pgOmit","omit","describePgEntity","sqlCommentByAddingTags","swallowError","scope","isRootQuery","fieldWithHooks","procedure","reduce","memo","proc","isStable","namespace","argTypes","argTypeIds","prev","typeId","idx","argModes","length","push","typeById","some","type","class","isSelectable","firstArgType","namespaceId","name","startsWith","makeField","forceList","fieldName","functionQueryNameList","functionQueryName","e","returnsSet"],"mappings":";;;;;;kBAGgB,SAASA,uBAAT,CACdC,OADc,EAEd,EAAEC,mBAAF,EAFc,EAGd;AACA,QAAMC,iBAAiBD,wBAAwB,MAA/C;AACA,QAAME,uBACJF,wBAAwB,MAAxB,IAAkCA,wBAAwB,MAD5D;;AAGAD,UAAQI,IAAR,CAAa,0BAAb,EAAyC,CAACC,MAAD,EAASC,KAAT,EAAgBC,OAAhB,KAA4B;AACnE,UAAM;AACJC,YADI;AAEJC,gBAFI;AAGJC,oCAA8BC,0BAH1B;AAIJC,uBAAiBC,aAJb;AAKJC,cAAQC,IALJ;AAMJC,sBANI;AAOJC,4BAPI;AAQJC;AARI,QASFZ,KATJ;AAUA,UAAM;AACJa,aAAO,EAAEC,WAAF,EADH;AAEJC;AAFI,QAGFd,OAHJ;;AAKA,QAAI,CAACa,WAAL,EAAkB;AAChB,aAAOf,MAAP;AACD;;AAED,WAAOG,OACLH,MADK,EAELM,2BAA2BW,SAA3B,CAAqCC,MAArC,CAA4C,CAACC,IAAD,EAAOC,IAAP,KAAgB;AAC1D;AACA,UAAI,CAACA,KAAKC,QAAV,EAAoB,OAAOF,IAAP;AACpB,UAAI,CAACC,KAAKE,SAAV,EAAqB,OAAOH,IAAP;AACrB,UAAIT,KAAKU,IAAL,EAAW,SAAX,CAAJ,EAA2B,OAAOD,IAAP;;AAE3B,YAAMI,WAAWH,KAAKI,UAAL,CAAgBN,MAAhB,CAAuB,CAACO,IAAD,EAAOC,MAAP,EAAeC,GAAf,KAAuB;AAC7D,YACEP,KAAKQ,QAAL,CAAcC,MAAd,KAAyB,CAAzB,IAA8B;AAC9BT,aAAKQ,QAAL,CAAcD,GAAd,MAAuB,GADvB,IAC8B;AAC9BP,aAAKQ,QAAL,CAAcD,GAAd,MAAuB,GAHzB,CAG6B;AAH7B,UAIE;AACAF,iBAAKK,IAAL,CAAUxB,2BAA2ByB,QAA3B,CAAoCL,MAApC,CAAV;AACD;AACD,eAAOD,IAAP;AACD,OATgB,EASd,EATc,CAAjB;AAUA,UACEF,SAASS,IAAT,CACEC,QAAQA,KAAKA,IAAL,KAAc,GAAd,IAAqBA,KAAKC,KAA1B,IAAmCD,KAAKC,KAAL,CAAWC,YADxD,CADF,EAIE;AACA;AACA,eAAOhB,IAAP;AACD;AACD,YAAMiB,eAAeb,SAAS,CAAT,CAArB;AACA,UACEa,gBACAA,aAAaH,IAAb,KAAsB,GADtB,IAEAG,aAAaF,KAFb,IAGAE,aAAaC,WAAb,KAA6BjB,KAAKiB,WAHlC,IAIAjB,KAAKkB,IAAL,CAAUC,UAAV,CAAsB,GAAEH,aAAaE,IAAK,GAA1C,CALF,EAME;AACA;AACA,eAAOnB,IAAP;AACD;;AAED,eAASqB,SAAT,CAAmBC,SAAnB,EAA8B;AAC5B,cAAMC,YAAYD,YACdrC,WAAWuC,qBAAX,CAAiCvB,IAAjC,CADc,GAEdhB,WAAWwC,iBAAX,CAA6BxB,IAA7B,CAFJ;AAGA,YAAI;AACFD,iBAAOhB,OACLgB,IADK,EAEL;AACE,aAACuB,SAAD,GAAalC,cAAckC,SAAd,EAAyBtB,IAAzB,EAA+BnB,KAA/B,EAAsC;AACjDe,4BADiD;AAEjDyB;AAFiD,aAAtC;AADf,WAFK,EAQJ,0BAAyB9B,iBACxBS,IADwB,CAExB,0CAAyCR,uBACzCQ,IADyC,EAEzC;AACEkB,kBAAM;AADR,WAFyC,CAKzC,EAfG,CAAP;AAiBD,SAlBD,CAkBE,OAAOO,CAAP,EAAU;AACVhC,uBAAagC,CAAb;AACD;AACF;AACD,UAAI,CAACzB,KAAK0B,UAAN,IAAoBjD,cAAxB,EAAwC;AACtC2C,kBAAU,KAAV;AACD;AACD,UAAIpB,KAAK0B,UAAL,IAAmBhD,oBAAvB,EAA6C;AAC3C0C,kBAAU,IAAV;AACD;AACD,aAAOrB,IAAP;AACD,KArED,EAqEG,EArEH,CAFK,EAwEJ,4CAxEI,CAAP;AA0ED,GA9FD;AA+FD,C","file":"PgQueryProceduresPlugin.js","sourcesContent":["// @flow\nimport type { Plugin } from \"graphile-build\";\n\nexport default (function PgQueryProceduresPlugin(\n  builder,\n  { pgSimpleCollections }\n) {\n  const hasConnections = pgSimpleCollections !== \"only\";\n  const hasSimpleCollections =\n    pgSimpleCollections === \"only\" || pgSimpleCollections === \"both\";\n\n  builder.hook(\"GraphQLObjectType:fields\", (fields, build, context) => {\n    const {\n      extend,\n      inflection,\n      pgIntrospectionResultsByKind: introspectionResultsByKind,\n      pgMakeProcField: makeProcField,\n      pgOmit: omit,\n      describePgEntity,\n      sqlCommentByAddingTags,\n      swallowError,\n    } = build;\n    const {\n      scope: { isRootQuery },\n      fieldWithHooks,\n    } = context;\n\n    if (!isRootQuery) {\n      return fields;\n    }\n\n    return extend(\n      fields,\n      introspectionResultsByKind.procedure.reduce((memo, proc) => {\n        // PERFORMANCE: These used to be .filter(...) calls\n        if (!proc.isStable) return memo;\n        if (!proc.namespace) return memo;\n        if (omit(proc, \"execute\")) return memo;\n\n        const argTypes = proc.argTypeIds.reduce((prev, typeId, idx) => {\n          if (\n            proc.argModes.length === 0 || // all args are `in`\n            proc.argModes[idx] === \"i\" || // this arg is `in`\n            proc.argModes[idx] === \"b\" // this arg is `inout`\n          ) {\n            prev.push(introspectionResultsByKind.typeById[typeId]);\n          }\n          return prev;\n        }, []);\n        if (\n          argTypes.some(\n            type => type.type === \"c\" && type.class && type.class.isSelectable\n          )\n        ) {\n          // Selects a table, ignore!\n          return memo;\n        }\n        const firstArgType = argTypes[0];\n        if (\n          firstArgType &&\n          firstArgType.type === \"c\" &&\n          firstArgType.class &&\n          firstArgType.namespaceId === proc.namespaceId &&\n          proc.name.startsWith(`${firstArgType.name}_`)\n        ) {\n          // It's a computed field, skip\n          return memo;\n        }\n\n        function makeField(forceList) {\n          const fieldName = forceList\n            ? inflection.functionQueryNameList(proc)\n            : inflection.functionQueryName(proc);\n          try {\n            memo = extend(\n              memo,\n              {\n                [fieldName]: makeProcField(fieldName, proc, build, {\n                  fieldWithHooks,\n                  forceList,\n                }),\n              },\n              `Adding query field for ${describePgEntity(\n                proc\n              )}. You can rename this field with:\\n\\n  ${sqlCommentByAddingTags(\n                proc,\n                {\n                  name: \"newNameHere\",\n                }\n              )}`\n            );\n          } catch (e) {\n            swallowError(e);\n          }\n        }\n        if (!proc.returnsSet || hasConnections) {\n          makeField(false);\n        }\n        if (proc.returnsSet && hasSimpleCollections) {\n          makeField(true);\n        }\n        return memo;\n      }, {}),\n      `Adding query procedures to root Query type`\n    );\n  });\n}: Plugin);\n"]}