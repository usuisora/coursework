{"version":3,"sources":["../../src/plugins/PgRecordReturnTypesPlugin.js"],"names":["PgRecordReturnTypesPlugin","builder","hook","_","build","newWithHooks","pgIntrospectionResultsByKind","introspectionResultsByKind","pgGetGqlTypeByTypeIdAndModifier","graphql","GraphQLObjectType","inflection","pgOmit","omit","describePgEntity","sqlCommentByAddingTags","pgSql","sql","pgGetSelectValueForFieldAndTypeAndModifier","getSelectValueForFieldAndTypeAndModifier","getSafeAliasFromResolveInfo","getSafeAliasFromAlias","procedure","forEach","proc","namespace","returnType","typeById","returnTypeId","id","argTypes","argTypeIds","reduce","prev","typeId","idx","argModes","length","push","argModesWithOutput","outputArgNames","includes","argNames","outputArgTypes","isMutation","isStable","firstArgType","computed","type","class","namespaceId","name","startsWith","procFieldName","functionMutationName","computedColumn","substr","functionQueryName","recordFunctionReturnType","description","fields","fieldWithHooks","memo","outputArgName","fieldName","functionOutputFieldName","fieldType","Error","fieldContext","addDataGenerator","parsedResolveInfoFragment","safeAlias","alias","pgQuery","queryBuilder","select","fragment","getTableAlias","identifier","resolve","data","_args","_context","resolveInfo","__origin","resultTypeName","isRecordReturnType","pgIntrospection"],"mappings":"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","file":"PgRecordReturnTypesPlugin.js","sourcesContent":["// @flow\nimport type { Plugin } from \"graphile-build\";\n\nexport default (function PgRecordReturnTypesPlugin(builder) {\n  builder.hook(\"init\", (_, build) => {\n    const {\n      newWithHooks,\n      pgIntrospectionResultsByKind: introspectionResultsByKind,\n      pgGetGqlTypeByTypeIdAndModifier,\n      graphql: { GraphQLObjectType },\n      inflection,\n      pgOmit: omit,\n      describePgEntity,\n      sqlCommentByAddingTags,\n      pgSql: sql,\n      pgGetSelectValueForFieldAndTypeAndModifier: getSelectValueForFieldAndTypeAndModifier,\n      getSafeAliasFromResolveInfo,\n      getSafeAliasFromAlias,\n    } = build;\n\n    introspectionResultsByKind.procedure.forEach(proc => {\n      // PERFORMANCE: These used to be .filter(...) calls\n      if (!proc.namespace) return;\n      if (omit(proc, \"execute\")) return;\n\n      const returnType = introspectionResultsByKind.typeById[proc.returnTypeId];\n      if (returnType.id !== \"2249\") {\n        return;\n      }\n      const argTypes = proc.argTypeIds.reduce((prev, typeId, idx) => {\n        if (\n          proc.argModes.length === 0 || // all args are `in`\n          proc.argModes[idx] === \"i\" || // this arg is `in`\n          proc.argModes[idx] === \"b\" // this arg is `inout`\n        ) {\n          prev.push(introspectionResultsByKind.typeById[typeId]);\n        }\n        return prev;\n      }, []);\n      const argModesWithOutput = [\n        \"o\", // OUT,\n        \"b\", // INOUT\n        \"t\", // TABLE\n      ];\n      const outputArgNames = proc.argTypeIds.reduce((prev, _, idx) => {\n        if (argModesWithOutput.includes(proc.argModes[idx])) {\n          prev.push(proc.argNames[idx] || \"\");\n        }\n        return prev;\n      }, []);\n      const outputArgTypes = proc.argTypeIds.reduce((prev, typeId, idx) => {\n        if (argModesWithOutput.includes(proc.argModes[idx])) {\n          prev.push(introspectionResultsByKind.typeById[typeId]);\n        }\n        return prev;\n      }, []);\n      const isMutation = !proc.isStable;\n      const firstArgType = argTypes[0];\n      const computed =\n        firstArgType &&\n        firstArgType.type === \"c\" &&\n        firstArgType.class &&\n        firstArgType.namespaceId === proc.namespaceId &&\n        proc.name.startsWith(`${firstArgType.name}_`);\n      const procFieldName = isMutation\n        ? inflection.functionMutationName(proc)\n        : computed\n          ? inflection.computedColumn(\n              proc.name.substr(firstArgType.name.length + 1),\n              proc\n            )\n          : inflection.functionQueryName(proc);\n      newWithHooks(\n        GraphQLObjectType,\n        {\n          name: inflection.recordFunctionReturnType(proc),\n          description: `The return type of our \\`${procFieldName}\\` ${\n            isMutation ? \"mutation\" : \"query\"\n          }.`,\n          fields: ({ fieldWithHooks }) => {\n            return outputArgNames.reduce((memo, outputArgName, idx) => {\n              const fieldName = inflection.functionOutputFieldName(\n                proc,\n                outputArgName,\n                idx + 1\n              );\n              const fieldType = pgGetGqlTypeByTypeIdAndModifier(\n                outputArgTypes[idx].id,\n                null\n              );\n              if (memo[fieldName]) {\n                throw new Error(\n                  `Tried to register field name '${fieldName}' twice in '${describePgEntity(\n                    proc\n                  )}'; the argument names are too similar.`\n                );\n              }\n              memo[fieldName] = fieldWithHooks(\n                fieldName,\n                fieldContext => {\n                  const { addDataGenerator } = fieldContext;\n                  addDataGenerator(parsedResolveInfoFragment => {\n                    const safeAlias = getSafeAliasFromAlias(\n                      parsedResolveInfoFragment.alias\n                    );\n                    return {\n                      pgQuery: queryBuilder => {\n                        queryBuilder.select(\n                          getSelectValueForFieldAndTypeAndModifier(\n                            fieldType,\n                            fieldContext,\n                            parsedResolveInfoFragment,\n                            sql.fragment`(${queryBuilder.getTableAlias()}.${sql.identifier(\n                              // According to https://www.postgresql.org/docs/10/static/sql-createfunction.html,\n                              // \"If you omit the name for an output argument, the system will choose a default column name.\"\n                              // In PG 9.x and 10, the column names appear to be assigned with a `column` prefix.\n                              outputArgName !== \"\"\n                                ? outputArgName\n                                : `column${idx + 1}`\n                            )})`,\n                            outputArgTypes[idx],\n                            null\n                          ),\n                          safeAlias\n                        );\n                      },\n                    };\n                  });\n                  return {\n                    type: fieldType,\n                    resolve(data, _args, _context, resolveInfo) {\n                      const safeAlias = getSafeAliasFromResolveInfo(\n                        resolveInfo\n                      );\n                      return data[safeAlias];\n                    },\n                  };\n                },\n                {}\n              );\n              return memo;\n            }, {});\n          },\n        },\n        {\n          __origin: `Adding record return type for ${describePgEntity(\n            proc\n          )}. You can rename the function's GraphQL field (and its dependent types) via:\\n\\n  ${sqlCommentByAddingTags(\n            proc,\n            {\n              name: \"newNameHere\",\n            }\n          )}\\n\\nYou can rename just the function's GraphQL result type via:\\n\\n  ${sqlCommentByAddingTags(\n            proc,\n            {\n              resultTypeName: \"newNameHere\",\n            }\n          )}`,\n          isRecordReturnType: true,\n          pgIntrospection: proc,\n        }\n      );\n    });\n    return _;\n  });\n}: Plugin);\n"]}