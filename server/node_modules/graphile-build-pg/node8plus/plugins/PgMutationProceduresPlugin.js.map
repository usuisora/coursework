{"version":3,"sources":["../../src/plugins/PgMutationProceduresPlugin.js"],"names":["PgMutationProceduresPlugin","builder","hook","fields","build","context","extend","pgIntrospectionResultsByKind","introspectionResultsByKind","inflection","pgMakeProcField","makeProcField","pgOmit","omit","swallowError","describePgEntity","sqlCommentByAddingTags","scope","isRootMutation","fieldWithHooks","procedure","reduce","memo","proc","isStable","namespace","fieldName","functionMutationName","isMutation","name","e"],"mappings":";;;;;;kBAGgB,SAASA,0BAAT,CAAoCC,OAApC,EAA6C;AAC3DA,UAAQC,IAAR,CAAa,0BAAb,EAAyC,CAACC,MAAD,EAASC,KAAT,EAAgBC,OAAhB,KAA4B;AACnE,UAAM;AACJC,YADI;AAEJC,oCAA8BC,0BAF1B;AAGJC,gBAHI;AAIJC,uBAAiBC,aAJb;AAKJC,cAAQC,IALJ;AAMJC,kBANI;AAOJC,sBAPI;AAQJC;AARI,QASFZ,KATJ;AAUA,UAAM;AACJa,aAAO,EAAEC,cAAF,EADH;AAEJC;AAFI,QAGFd,OAHJ;;AAKA,QAAI,CAACa,cAAL,EAAqB;AACnB,aAAOf,MAAP;AACD;;AAED,WAAOG,OACLH,MADK,EAELK,2BAA2BY,SAA3B,CAAqCC,MAArC,CAA4C,CAACC,IAAD,EAAOC,IAAP,KAAgB;AAC1D;AACA,UAAIA,KAAKC,QAAT,EAAmB,OAAOF,IAAP;AACnB,UAAI,CAACC,KAAKE,SAAV,EAAqB,OAAOH,IAAP;AACrB,UAAIT,KAAKU,IAAL,EAAW,SAAX,CAAJ,EAA2B,OAAOD,IAAP;;AAE3B,YAAMI,YAAYjB,WAAWkB,oBAAX,CAAgCJ,IAAhC,CAAlB;AACA,UAAI;AACFD,eAAOhB,OACLgB,IADK,EAEL;AACE,WAACI,SAAD,GAAaf,cAAce,SAAd,EAAyBH,IAAzB,EAA+BnB,KAA/B,EAAsC;AACjDe,0BADiD;AAEjDS,wBAAY;AAFqC,WAAtC;AADf,SAFK,EAQJ,6BAA4Bb,iBAC3BQ,IAD2B,CAE3B,0CAAyCP,uBACzCO,IADyC,EAEzC;AACEM,gBAAM;AADR,SAFyC,CAKzC,EAfG,CAAP;AAiBD,OAlBD,CAkBE,OAAOC,CAAP,EAAU;AACVhB,qBAAagB,CAAb;AACD;AACD,aAAOR,IAAP;AACD,KA7BD,EA6BG,EA7BH,CAFK,EAgCJ,kDAhCI,CAAP;AAkCD,GAtDD;AAuDD,C","file":"PgMutationProceduresPlugin.js","sourcesContent":["// @flow\nimport type { Plugin } from \"graphile-build\";\n\nexport default (function PgMutationProceduresPlugin(builder) {\n  builder.hook(\"GraphQLObjectType:fields\", (fields, build, context) => {\n    const {\n      extend,\n      pgIntrospectionResultsByKind: introspectionResultsByKind,\n      inflection,\n      pgMakeProcField: makeProcField,\n      pgOmit: omit,\n      swallowError,\n      describePgEntity,\n      sqlCommentByAddingTags,\n    } = build;\n    const {\n      scope: { isRootMutation },\n      fieldWithHooks,\n    } = context;\n\n    if (!isRootMutation) {\n      return fields;\n    }\n\n    return extend(\n      fields,\n      introspectionResultsByKind.procedure.reduce((memo, proc) => {\n        // PERFORMANCE: These used to be .filter(...) calls\n        if (proc.isStable) return memo;\n        if (!proc.namespace) return memo;\n        if (omit(proc, \"execute\")) return memo;\n\n        const fieldName = inflection.functionMutationName(proc);\n        try {\n          memo = extend(\n            memo,\n            {\n              [fieldName]: makeProcField(fieldName, proc, build, {\n                fieldWithHooks,\n                isMutation: true,\n              }),\n            },\n            `Adding mutation field for ${describePgEntity(\n              proc\n            )}. You can rename this field with:\\n\\n  ${sqlCommentByAddingTags(\n              proc,\n              {\n                name: \"newNameHere\",\n              }\n            )}`\n          );\n        } catch (e) {\n          swallowError(e);\n        }\n        return memo;\n      }, {}),\n      `Adding mutation procedure to root Mutation field`\n    );\n  });\n}: Plugin);\n"]}