{"version":3,"sources":["../../src/plugins/PgMutationCreatePlugin.js"],"names":["debug","PgMutationCreatePlugin","builder","pgDisableDefaultMutations","hook","fields","build","context","extend","newWithHooks","parseResolveInfo","pgIntrospectionResultsByKind","pgGetGqlTypeByTypeIdAndModifier","pgGetGqlInputTypeByTypeIdAndModifier","pgSql","sql","gql2pg","graphql","GraphQLObjectType","GraphQLInputObjectType","GraphQLNonNull","GraphQLString","pgColumnFilter","inflection","pgQueryFromResolveData","queryFromResolveData","pgOmit","omit","pgViaTemporaryTable","viaTemporaryTable","describePgEntity","sqlCommentByAddingTags","pgField","scope","isRootMutation","fieldWithHooks","class","reduce","memo","table","namespace","isSelectable","isInsertable","Table","type","id","name","TableInput","tableTypeName","tableType","InputType","createInputType","description","clientMutationId","tableFieldName","__origin","isPgCreateInputType","pgInflection","pgIntrospection","PayloadType","createPayloadType","tableName","isPgCreatePayloadResultField","pgFieldIntrospection","isMutationPayload","isPgCreatePayloadType","fieldName","createField","getDataFromParsedResolveInfoFragment","relevantAttributes","attributes","filter","attr","args","input","resolve","data","pgClient","resolveInfo","parsedResolveInfoFragment","resolveData","insertedRowAlias","identifier","Symbol","query","sqlColumns","sqlValues","inputData","forEach","column","val","Object","prototype","hasOwnProperty","call","push","typeModifier","mutationQuery","length","fragment","join","row","rows","e","isPgCreateMutationField"],"mappings":"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","file":"PgMutationCreatePlugin.js","sourcesContent":["// @flow\nimport type { Plugin } from \"graphile-build\";\nimport debugFactory from \"debug\";\n\nconst debug = debugFactory(\"graphile-build-pg\");\n\nexport default (function PgMutationCreatePlugin(\n  builder,\n  { pgDisableDefaultMutations }\n) {\n  if (pgDisableDefaultMutations) {\n    return;\n  }\n\n  builder.hook(\"GraphQLObjectType:fields\", (fields, build, context) => {\n    const {\n      extend,\n      newWithHooks,\n      parseResolveInfo,\n      pgIntrospectionResultsByKind,\n      pgGetGqlTypeByTypeIdAndModifier,\n      pgGetGqlInputTypeByTypeIdAndModifier,\n      pgSql: sql,\n      gql2pg,\n      graphql: {\n        GraphQLObjectType,\n        GraphQLInputObjectType,\n        GraphQLNonNull,\n        GraphQLString,\n      },\n      pgColumnFilter,\n      inflection,\n      pgQueryFromResolveData: queryFromResolveData,\n      pgOmit: omit,\n      pgViaTemporaryTable: viaTemporaryTable,\n      describePgEntity,\n      sqlCommentByAddingTags,\n      pgField,\n    } = build;\n    const {\n      scope: { isRootMutation },\n      fieldWithHooks,\n    } = context;\n\n    if (!isRootMutation) {\n      return fields;\n    }\n\n    return extend(\n      fields,\n      pgIntrospectionResultsByKind.class.reduce((memo, table) => {\n        // PERFORMANCE: These used to be .filter(...) calls\n        if (!table.namespace) return memo;\n        if (!table.isSelectable) return memo;\n        if (!table.isInsertable || omit(table, \"create\")) return memo;\n\n        const Table = pgGetGqlTypeByTypeIdAndModifier(table.type.id, null);\n        if (!Table) {\n          debug(\n            `There was no table type for table '${table.namespace.name}.${\n              table.name\n            }', so we're not generating a create mutation for it.`\n          );\n          return memo;\n        }\n        const TableInput = pgGetGqlInputTypeByTypeIdAndModifier(\n          table.type.id,\n          null\n        );\n        if (!TableInput) {\n          debug(\n            `There was no input type for table '${table.namespace.name}.${\n              table.name\n            }', so we're going to omit it from the create mutation.`\n          );\n        }\n        const tableTypeName = inflection.tableType(table);\n        const InputType = newWithHooks(\n          GraphQLInputObjectType,\n          {\n            name: inflection.createInputType(table),\n            description: `All input for the create \\`${tableTypeName}\\` mutation.`,\n            fields: {\n              clientMutationId: {\n                description:\n                  \"An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client.\",\n                type: GraphQLString,\n              },\n              ...(TableInput\n                ? {\n                    [inflection.tableFieldName(table)]: {\n                      description: `The \\`${tableTypeName}\\` to be created by this mutation.`,\n                      type: new GraphQLNonNull(TableInput),\n                    },\n                  }\n                : null),\n            },\n          },\n          {\n            __origin: `Adding table create input type for ${describePgEntity(\n              table\n            )}. You can rename the table's GraphQL type via:\\n\\n  ${sqlCommentByAddingTags(\n              table,\n              {\n                name: \"newNameHere\",\n              }\n            )}`,\n            isPgCreateInputType: true,\n            pgInflection: table, // TODO:v5: remove - TYPO!\n            pgIntrospection: table,\n          }\n        );\n        const PayloadType = newWithHooks(\n          GraphQLObjectType,\n          {\n            name: inflection.createPayloadType(table),\n            description: `The output of our create \\`${tableTypeName}\\` mutation.`,\n            fields: ({ fieldWithHooks }) => {\n              const tableName = inflection.tableFieldName(table);\n              return {\n                clientMutationId: {\n                  description:\n                    \"The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations.\",\n                  type: GraphQLString,\n                },\n                [tableName]: pgField(\n                  build,\n                  fieldWithHooks,\n                  tableName,\n                  {\n                    description: `The \\`${tableTypeName}\\` that was created by this mutation.`,\n                    type: Table,\n                  },\n                  {\n                    isPgCreatePayloadResultField: true,\n                    pgFieldIntrospection: table,\n                  }\n                ),\n              };\n            },\n          },\n          {\n            __origin: `Adding table create payload type for ${describePgEntity(\n              table\n            )}. You can rename the table's GraphQL type via:\\n\\n  ${sqlCommentByAddingTags(\n              table,\n              {\n                name: \"newNameHere\",\n              }\n            )}\\n\\nor disable the built-in create mutation via:\\n\\n  ${sqlCommentByAddingTags(\n              table,\n              { omit: \"create\" }\n            )}`,\n            isMutationPayload: true,\n            isPgCreatePayloadType: true,\n            pgIntrospection: table,\n          }\n        );\n        const fieldName = inflection.createField(table);\n        memo = build.extend(\n          memo,\n          {\n            [fieldName]: fieldWithHooks(\n              fieldName,\n              context => {\n                const { getDataFromParsedResolveInfoFragment } = context;\n                const relevantAttributes = table.attributes.filter(\n                  attr =>\n                    pgColumnFilter(attr, build, context) &&\n                    !omit(attr, \"create\")\n                );\n                return {\n                  description: `Creates a single \\`${tableTypeName}\\`.`,\n                  type: PayloadType,\n                  args: {\n                    input: {\n                      type: new GraphQLNonNull(InputType),\n                    },\n                  },\n                  async resolve(data, { input }, { pgClient }, resolveInfo) {\n                    const parsedResolveInfoFragment = parseResolveInfo(\n                      resolveInfo\n                    );\n                    const resolveData = getDataFromParsedResolveInfoFragment(\n                      parsedResolveInfoFragment,\n                      PayloadType\n                    );\n                    const insertedRowAlias = sql.identifier(Symbol());\n                    const query = queryFromResolveData(\n                      insertedRowAlias,\n                      insertedRowAlias,\n                      resolveData,\n                      {}\n                    );\n                    const sqlColumns = [];\n                    const sqlValues = [];\n                    const inputData = input[inflection.tableFieldName(table)];\n                    relevantAttributes.forEach(attr => {\n                      const fieldName = inflection.column(attr);\n                      const val = inputData[fieldName];\n                      if (\n                        Object.prototype.hasOwnProperty.call(\n                          inputData,\n                          fieldName\n                        )\n                      ) {\n                        sqlColumns.push(sql.identifier(attr.name));\n                        sqlValues.push(\n                          gql2pg(val, attr.type, attr.typeModifier)\n                        );\n                      }\n                    });\n\n                    const mutationQuery = sql.query`\n                    insert into ${sql.identifier(\n                      table.namespace.name,\n                      table.name\n                    )} ${\n                      sqlColumns.length\n                        ? sql.fragment`(\n                        ${sql.join(sqlColumns, \", \")}\n                      ) values(${sql.join(sqlValues, \", \")})`\n                        : sql.fragment`default values`\n                    } returning *`;\n\n                    let row;\n                    try {\n                      await pgClient.query(\"SAVEPOINT graphql_mutation\");\n                      const rows = await viaTemporaryTable(\n                        pgClient,\n                        sql.identifier(table.namespace.name, table.name),\n                        mutationQuery,\n                        insertedRowAlias,\n                        query\n                      );\n                      row = rows[0];\n                      await pgClient.query(\n                        \"RELEASE SAVEPOINT graphql_mutation\"\n                      );\n                    } catch (e) {\n                      await pgClient.query(\n                        \"ROLLBACK TO SAVEPOINT graphql_mutation\"\n                      );\n                      throw e;\n                    }\n                    return {\n                      clientMutationId: input.clientMutationId,\n                      data: row,\n                    };\n                  },\n                };\n              },\n              {\n                pgFieldIntrospection: table,\n                isPgCreateMutationField: true,\n              }\n            ),\n          },\n          `Adding create mutation for ${describePgEntity(\n            table\n          )}. You can omit this default mutation with:\\n\\n  ${sqlCommentByAddingTags(\n            table,\n            {\n              omit: \"create\",\n            }\n          )}`\n        );\n        return memo;\n      }, {}),\n      `Adding default 'create' mutation to root mutation`\n    );\n  });\n}: Plugin);\n"]}