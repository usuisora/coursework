{"version":3,"sources":["../../src/plugins/PgConditionComputedColumn.js"],"names":["PgConditionComputedColumnPlugin","builder","hook","_","build","newWithHooks","pgIntrospectionResultsByKind","introspectionResultsByKind","pgGetGqlInputTypeByTypeIdAndModifier","graphql","GraphQLInputObjectType","GraphQLString","pgColumnFilter","inflection","pgOmit","omit","describePgEntity","sqlCommentByAddingTags","class","forEach","table","isSelectable","namespace","tableTypeName","tableType","description","name","conditionType","fields","context","fieldWithHooks","attributes","reduce","memo","attr","fieldName","column","extend","type","typeId","typeModifier","isPgConnectionConditionInputField","__origin","pgIntrospection","isPgCondition","args","pgSql","sql","gql2pg","getTypeByName","pgGetGqlTypeByTypeIdAndModifier","scope","isPgFieldConnection","isPgFieldSimpleCollection","pgFieldIntrospection","addArgDataGenerator","Self","field","shouldAddCondition","kind","TableType","id","TableConditionType","relevantAttributes","filter","connectionCondition","condition","pgQuery","queryBuilder","val","where","fragment","getTableAlias","identifier"],"mappings":"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","file":"PgConditionComputedColumn.js","sourcesContent":["// @flow\nimport type { Plugin } from \"graphile-build\";\n\nexport default (function PgConditionComputedColumnPlugin(builder) {\n  builder.hook(\"init\", (_, build) => {\n    const {\n      newWithHooks,\n      pgIntrospectionResultsByKind: introspectionResultsByKind,\n      pgGetGqlInputTypeByTypeIdAndModifier,\n      graphql: { GraphQLInputObjectType, GraphQLString },\n      pgColumnFilter,\n      inflection,\n      pgOmit: omit,\n      describePgEntity,\n      sqlCommentByAddingTags,\n    } = build;\n    introspectionResultsByKind.class.forEach(table => {\n      // PERFORMANCE: These used to be .filter(...) calls\n      if (!table.isSelectable || omit(table, \"filter\")) return;\n      if (!table.namespace) return;\n\n      const tableTypeName = inflection.tableType(table);\n      /* const TableConditionType = */\n      newWithHooks(\n        GraphQLInputObjectType,\n        {\n          description: `A condition to be used against \\`${tableTypeName}\\` object types. All fields are tested for equality and combined with a logical ‘and.’`,\n          name: inflection.conditionType(inflection.tableType(table)),\n          fields: context => {\n            const { fieldWithHooks } = context;\n            return table.attributes.reduce((memo, attr) => {\n              // PERFORMANCE: These used to be .filter(...) calls\n              if (!pgColumnFilter(attr, build, context)) return memo;\n              if (omit(attr, \"filter\")) return memo;\n\n              const fieldName = inflection.column(attr);\n              memo = build.extend(\n                memo,\n                {\n                  [fieldName]: fieldWithHooks(\n                    fieldName,\n                    {\n                      description: `Checks for equality with the object’s \\`${fieldName}\\` field.`,\n                      type:\n                        pgGetGqlInputTypeByTypeIdAndModifier(\n                          attr.typeId,\n                          attr.typeModifier\n                        ) || GraphQLString,\n                    },\n                    {\n                      isPgConnectionConditionInputField: true,\n                    }\n                  ),\n                },\n                `Adding condition argument for ${describePgEntity(attr)}`\n              );\n              return memo;\n            }, {});\n          },\n        },\n        {\n          __origin: `Adding condition type for ${describePgEntity(\n            table\n          )}. You can rename the table's GraphQL type via:\\n\\n  ${sqlCommentByAddingTags(\n            table,\n            {\n              name: \"newNameHere\",\n            }\n          )}`,\n          pgIntrospection: table,\n          isPgCondition: true,\n        },\n        true // Conditions might all be filtered\n      );\n    });\n    return _;\n  });\n\n  builder.hook(\n    \"GraphQLObjectType:fields:field:args\",\n    (args, build, context) => {\n      const {\n        pgSql: sql,\n        gql2pg,\n        extend,\n        getTypeByName,\n        pgGetGqlTypeByTypeIdAndModifier,\n        pgColumnFilter,\n        inflection,\n        pgOmit: omit,\n      } = build;\n      const {\n        scope: {\n          isPgFieldConnection,\n          isPgFieldSimpleCollection,\n          pgFieldIntrospection: table,\n        },\n        addArgDataGenerator,\n        Self,\n        field,\n      } = context;\n\n      const shouldAddCondition =\n        isPgFieldConnection || isPgFieldSimpleCollection;\n      if (\n        !shouldAddCondition ||\n        !table ||\n        table.kind !== \"class\" ||\n        !table.namespace ||\n        omit(table, \"filter\")\n      ) {\n        return args;\n      }\n      const TableType = pgGetGqlTypeByTypeIdAndModifier(table.type.id, null);\n      const TableConditionType = getTypeByName(\n        inflection.conditionType(TableType.name)\n      );\n      if (!TableConditionType) {\n        return args;\n      }\n\n      const relevantAttributes = table.attributes.filter(\n        attr => pgColumnFilter(attr, build, context) && !omit(attr, \"filter\")\n      );\n\n      addArgDataGenerator(function connectionCondition({ condition }) {\n        return {\n          pgQuery: queryBuilder => {\n            if (condition != null) {\n              relevantAttributes.forEach(attr => {\n                const fieldName = inflection.column(attr);\n                const val = condition[fieldName];\n                if (val != null) {\n                  queryBuilder.where(\n                    sql.fragment`${queryBuilder.getTableAlias()}.${sql.identifier(\n                      attr.name\n                    )} = ${gql2pg(val, attr.type, attr.typeModifier)}`\n                  );\n                } else if (val === null) {\n                  queryBuilder.where(\n                    sql.fragment`${queryBuilder.getTableAlias()}.${sql.identifier(\n                      attr.name\n                    )} IS NULL`\n                  );\n                }\n              });\n            }\n          },\n        };\n      });\n\n      return extend(\n        args,\n        {\n          condition: {\n            description:\n              \"A condition to be used in determining which values should be returned by the collection.\",\n            type: TableConditionType,\n          },\n        },\n        `Adding condition to connection field '${field.name}' of '${Self.name}'`\n      );\n    }\n  );\n}: Plugin);\n"]}