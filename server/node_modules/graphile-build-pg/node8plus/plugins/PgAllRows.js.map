{"version":3,"sources":["../../src/plugins/PgAllRows.js"],"names":["PgAllRows","builder","pgViewUniqueKey","pgSimpleCollections","hasConnections","hasSimpleCollections","hook","fields","build","context","parseResolveInfo","extend","getTypeByName","pgGetGqlTypeByTypeIdAndModifier","pgSql","sql","pgIntrospectionResultsByKind","introspectionResultsByKind","inflection","graphql","GraphQLList","GraphQLNonNull","pgQueryFromResolveData","queryFromResolveData","pgAddStartEndCursor","addStartEndCursor","pgOmit","omit","fieldWithHooks","scope","isRootQuery","class","reduce","memo","table","isSelectable","namespace","TableType","type","id","tableTypeName","name","ConnectionType","connection","Error","attributes","primaryKeyConstraint","primaryKeys","keyAttributeNums","map","num","find","attr","isView","t","classKind","viewUniqueKey","tags","uniqueKey","uniqueIdAttribute","undefined","namespaceName","schema","sqlFullTableName","identifier","makeField","isConnection","fieldName","allRows","allRowsSimple","getDataFromParsedResolveInfoFragment","description","args","resolve","parent","pgClient","resolveInfo","parsedResolveInfoFragment","resolveData","returnType","query","withPaginationAsFields","queryBuilder","beforeLock","isOrderUnique","data","cursorPrefix","forEach","key","orderBy","fragment","getTableAlias","setOrderIsUnique","text","values","compile","debugSql","enabled","result","rows","row","isPgFieldConnection","isPgFieldSimpleCollection","pgFieldIntrospection"],"mappings":"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","file":"PgAllRows.js","sourcesContent":["// @flow\n\nimport type { Plugin } from \"graphile-build\";\nimport debugSql from \"./debugSql\";\n\nexport default (async function PgAllRows(\n  builder,\n  { pgViewUniqueKey, pgSimpleCollections }\n) {\n  const hasConnections = pgSimpleCollections !== \"only\";\n  const hasSimpleCollections =\n    pgSimpleCollections === \"only\" || pgSimpleCollections === \"both\";\n  builder.hook(\"GraphQLObjectType:fields\", (fields, build, context) => {\n    const {\n      parseResolveInfo,\n      extend,\n      getTypeByName,\n      pgGetGqlTypeByTypeIdAndModifier,\n      pgSql: sql,\n      pgIntrospectionResultsByKind: introspectionResultsByKind,\n      inflection,\n      graphql: { GraphQLList, GraphQLNonNull },\n      pgQueryFromResolveData: queryFromResolveData,\n      pgAddStartEndCursor: addStartEndCursor,\n      pgOmit: omit,\n    } = build;\n    const {\n      fieldWithHooks,\n      scope: { isRootQuery },\n    } = context;\n    if (!isRootQuery) {\n      return fields;\n    }\n    return extend(\n      fields,\n      introspectionResultsByKind.class.reduce((memo, table) => {\n        // PERFORMANCE: These used to be .filter(...) calls\n        if (!table.isSelectable) return memo;\n        if (!table.namespace) return memo;\n        if (omit(table, \"all\")) return memo;\n\n        const TableType = pgGetGqlTypeByTypeIdAndModifier(table.type.id, null);\n        if (!TableType) {\n          return memo;\n        }\n        const tableTypeName = TableType.name;\n        const ConnectionType = getTypeByName(\n          inflection.connection(TableType.name)\n        );\n        if (!TableType) {\n          throw new Error(\n            `Could not find GraphQL type for table '${table.name}'`\n          );\n        }\n        const attributes = table.attributes;\n        const primaryKeyConstraint = table.primaryKeyConstraint;\n        const primaryKeys =\n          primaryKeyConstraint &&\n          primaryKeyConstraint.keyAttributeNums.map(num =>\n            attributes.find(attr => attr.num === num)\n          );\n        const isView = t => t.classKind === \"v\";\n        const viewUniqueKey = table.tags.uniqueKey || pgViewUniqueKey;\n        const uniqueIdAttribute = viewUniqueKey\n          ? attributes.find(attr => attr.name === viewUniqueKey)\n          : undefined;\n        if (isView && table.tags.uniqueKey && !uniqueIdAttribute) {\n          throw new Error(\n            `Could not find the named unique key '${\n              table.tags.uniqueKey\n            }' on view '${table.namespaceName}.${table.name}'`\n          );\n        }\n        if (!ConnectionType) {\n          throw new Error(\n            `Could not find GraphQL connection type for table '${table.name}'`\n          );\n        }\n        const schema = table.namespace;\n        const sqlFullTableName = sql.identifier(schema.name, table.name);\n        function makeField(isConnection) {\n          const fieldName = isConnection\n            ? inflection.allRows(table)\n            : inflection.allRowsSimple(table);\n          memo[fieldName] = fieldWithHooks(\n            fieldName,\n            ({ getDataFromParsedResolveInfoFragment }) => {\n              return {\n                description: isConnection\n                  ? `Reads and enables pagination through a set of \\`${tableTypeName}\\`.`\n                  : `Reads a set of \\`${tableTypeName}\\`.`,\n                type: isConnection\n                  ? ConnectionType\n                  : new GraphQLList(new GraphQLNonNull(TableType)),\n                args: {},\n                async resolve(parent, args, { pgClient }, resolveInfo) {\n                  const parsedResolveInfoFragment = parseResolveInfo(\n                    resolveInfo\n                  );\n                  const resolveData = getDataFromParsedResolveInfoFragment(\n                    parsedResolveInfoFragment,\n                    resolveInfo.returnType\n                  );\n                  const query = queryFromResolveData(\n                    sqlFullTableName,\n                    undefined,\n                    resolveData,\n                    {\n                      withPaginationAsFields: isConnection,\n                    },\n                    queryBuilder => {\n                      if (primaryKeys) {\n                        queryBuilder.beforeLock(\"orderBy\", () => {\n                          if (!queryBuilder.isOrderUnique(false)) {\n                            // Order by PK if no order specified\n                            queryBuilder.data.cursorPrefix = [\n                              \"primary_key_asc\",\n                            ];\n                            primaryKeys.forEach(key => {\n                              queryBuilder.orderBy(\n                                sql.fragment`${queryBuilder.getTableAlias()}.${sql.identifier(\n                                  key.name\n                                )}`,\n                                true\n                              );\n                            });\n                            queryBuilder.setOrderIsUnique();\n                          }\n                        });\n                      } else if (isView(table) && !!uniqueIdAttribute) {\n                        queryBuilder.beforeLock(\"orderBy\", () => {\n                          if (!queryBuilder.isOrderUnique(false)) {\n                            queryBuilder.data.cursorPrefix = [\n                              \"view_unique_key_asc\",\n                            ];\n                            queryBuilder.orderBy(\n                              sql.fragment`${queryBuilder.getTableAlias()}.${sql.identifier(\n                                uniqueIdAttribute.name\n                              )}`,\n                              true\n                            );\n                            queryBuilder.setOrderIsUnique();\n                          }\n                        });\n                      }\n                    }\n                  );\n                  const { text, values } = sql.compile(query);\n                  if (debugSql.enabled) debugSql(text);\n                  const result = await pgClient.query(text, values);\n                  if (isConnection) {\n                    const {\n                      rows: [row],\n                    } = result;\n                    return addStartEndCursor(row);\n                  } else {\n                    return result.rows;\n                  }\n                },\n              };\n            },\n            {\n              isPgFieldConnection: isConnection,\n              isPgFieldSimpleCollection: !isConnection,\n              pgFieldIntrospection: table,\n            }\n          );\n        }\n        if (TableType && ConnectionType && hasConnections) {\n          makeField(true);\n        }\n        if (TableType && hasSimpleCollections) {\n          makeField(false);\n        }\n        return memo;\n      }, {}),\n      `Adding 'all*' relations to root Query`\n    );\n  });\n}: Plugin);\n"]}