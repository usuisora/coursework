{"version":3,"sources":["../../src/plugins/pgField.js"],"names":["pgField","build","fieldWithHooks","fieldName","fieldSpecGenerator","fieldScope","whereFrom","options","pgSql","sql","pgQueryFromResolveData","queryFromResolveData","getSafeAliasFromAlias","getSafeAliasFromResolveInfo","pgTweakFragmentForTypeAndModifier","fieldContext","fieldSpec","type","FieldType","nullableType","graphql","getNullableType","namedType","getNamedType","isListType","constructor","GraphQLList","isLeafType","pgType","Error","getDataFromParsedResolveInfoFragment","addDataGenerator","parsedResolveInfoFragment","safeAlias","alias","resolveData","hoistCursor","usesCursor","length","pgQuery","queryBuilder","select","tableAlias","getTableAlias","identifier","Symbol","query","pgTypeModifier","onlyJsonField","asJson","innerQueryBuilder","parentQueryBuilder","withQueryBuilder","fragment","resolve","data","_args","_context","resolveInfo","map","d"],"mappings":"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","file":"pgField.js","sourcesContent":["export default function pgField(\n  build,\n  fieldWithHooks,\n  fieldName,\n  fieldSpecGenerator,\n  fieldScope = {},\n  whereFrom = false,\n  options = {}\n) {\n  const {\n    pgSql: sql,\n    pgQueryFromResolveData: queryFromResolveData,\n    getSafeAliasFromAlias,\n    getSafeAliasFromResolveInfo,\n    pgTweakFragmentForTypeAndModifier,\n  } = build;\n  return fieldWithHooks(\n    fieldName,\n    fieldContext => {\n      const fieldSpec =\n        typeof fieldSpecGenerator === \"function\"\n          ? fieldSpecGenerator(fieldContext)\n          : fieldSpecGenerator;\n      const { type: FieldType } = fieldSpec;\n      const nullableType = build.graphql.getNullableType(FieldType);\n      const namedType = build.graphql.getNamedType(FieldType);\n      const isListType =\n        nullableType !== namedType &&\n        nullableType.constructor === build.graphql.GraphQLList;\n      const isLeafType = build.graphql.isLeafType(FieldType);\n      if (isLeafType && !options.pgType) {\n        // eslint-disable-next-line no-console\n        throw new Error(\n          \"pgField call omits options.pgType for a leaf type; certain tweaks may not be applied!\"\n        );\n      }\n      const {\n        getDataFromParsedResolveInfoFragment,\n        addDataGenerator,\n      } = fieldContext;\n      addDataGenerator(parsedResolveInfoFragment => {\n        const safeAlias = getSafeAliasFromAlias(\n          parsedResolveInfoFragment.alias\n        );\n        const resolveData = getDataFromParsedResolveInfoFragment(\n          parsedResolveInfoFragment,\n          FieldType\n        );\n        return {\n          ...(options.hoistCursor &&\n          resolveData.usesCursor &&\n          resolveData.usesCursor.length\n            ? { usesCursor: [true] }\n            : null),\n          pgQuery: queryBuilder => {\n            queryBuilder.select(() => {\n              const tableAlias =\n                whereFrom === false\n                  ? queryBuilder.getTableAlias()\n                  : sql.identifier(Symbol());\n              const query = queryFromResolveData(\n                whereFrom ? whereFrom(queryBuilder) : sql.identifier(Symbol()),\n                isLeafType && options.pgType\n                  ? pgTweakFragmentForTypeAndModifier(\n                      tableAlias,\n                      options.pgType,\n                      options.pgTypeModifier,\n                      {}\n                    )\n                  : tableAlias,\n                resolveData,\n                whereFrom === false\n                  ? { onlyJsonField: true }\n                  : { asJson: true },\n                innerQueryBuilder => {\n                  innerQueryBuilder.parentQueryBuilder = queryBuilder;\n                  if (typeof options.withQueryBuilder === \"function\") {\n                    options.withQueryBuilder(innerQueryBuilder, {\n                      parsedResolveInfoFragment,\n                    });\n                  }\n                }\n              );\n              return sql.fragment`(${query})`;\n            }, safeAlias);\n          },\n        };\n      });\n\n      return {\n        resolve(data, _args, _context, resolveInfo) {\n          const safeAlias = getSafeAliasFromResolveInfo(resolveInfo);\n          if (data.data == null) return null;\n          if (isListType) {\n            return data.data.map(d => (d != null ? d[safeAlias] : null));\n          } else {\n            return data.data[safeAlias];\n          }\n        },\n        ...fieldSpec,\n      };\n    },\n    fieldScope\n  );\n}\n"]}