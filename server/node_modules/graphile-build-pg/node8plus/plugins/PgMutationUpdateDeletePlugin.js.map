{"version":3,"sources":["../../src/plugins/PgMutationUpdateDeletePlugin.js"],"names":["debug","PgMutationUpdateDeletePlugin","builder","pgDisableDefaultMutations","hook","fields","build","context","newWithHooks","getNodeIdForTypeAndIdentifiers","getTypeAndIdentifiersFromNodeId","nodeIdFieldName","fieldDataGeneratorsByType","extend","parseResolveInfo","getTypeByName","gql2pg","pgGetGqlTypeByTypeIdAndModifier","pgGetGqlInputTypeByTypeIdAndModifier","pgIntrospectionResultsByKind","introspectionResultsByKind","pgSql","sql","graphql","GraphQLNonNull","GraphQLInputObjectType","GraphQLString","GraphQLObjectType","GraphQLID","pgColumnFilter","inflection","pgQueryFromResolveData","queryFromResolveData","pgOmit","omit","pgViaTemporaryTable","viaTemporaryTable","describePgEntity","sqlCommentByAddingTags","pgField","scope","isRootMutation","fieldWithHooks","reduce","outerMemo","mode","class","memo","table","namespace","canUpdate","isUpdatable","canDelete","isDeletable","TableType","type","id","commonCodeRenameMe","pgClient","resolveInfo","getDataFromParsedResolveInfoFragment","PayloadType","input","condition","parsedResolveInfoFragment","resolveData","sqlTypeIdentifier","identifier","name","sqlMutationQuery","sqlColumns","sqlValues","inputData","patchField","tableFieldName","attributes","forEach","attr","fieldName","column","val","push","typeModifier","length","query","join","map","col","i","fragment","modifiedRowAlias","Symbol","row","rows","e","Error","pluralize","_singularizedTableName","clientMutationId","data","uniqueConstraints","constraints","filter","con","Table","tableTypeName","TablePatch","patchType","description","tableName","deletedNodeIdFieldName","deletedNodeId","Object","assign","addDataGenerator","fieldDataGeneratorsByTableType","get","gens","gen","resolve","__identifiers","isPgMutationPayloadDeletedNodeIdField","__origin","isMutationPayload","isPgUpdatePayloadType","isPgDeletePayloadType","pgIntrospection","primaryKeyConstraint","primaryKeys","keyAttributes","InputType","isPgUpdateInputType","isPgUpdateNodeInputType","isPgDeleteInputType","isPgDeleteNodeInputType","pgInflection","isMutationInput","args","parent","nodeId","Type","identifiers","key","idx","isPgNodeMutation","pgFieldIntrospection","constraint","keys","every","_","some","typeId","isPgUpdateByKeysInputType","isPgDeleteByKeysInputType","pgKeys","pgFieldConstraint"],"mappings":"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","file":"PgMutationUpdateDeletePlugin.js","sourcesContent":["// @flow\nimport type { Plugin } from \"graphile-build\";\nimport debugFactory from \"debug\";\n\nconst debug = debugFactory(\"graphile-build-pg\");\n\nexport default (async function PgMutationUpdateDeletePlugin(\n  builder,\n  { pgDisableDefaultMutations }\n) {\n  if (pgDisableDefaultMutations) {\n    return;\n  }\n\n  builder.hook(\"GraphQLObjectType:fields\", (fields, build, context) => {\n    const {\n      newWithHooks,\n      getNodeIdForTypeAndIdentifiers,\n      getTypeAndIdentifiersFromNodeId,\n      nodeIdFieldName,\n      fieldDataGeneratorsByType,\n      extend,\n      parseResolveInfo,\n      getTypeByName,\n      gql2pg,\n      pgGetGqlTypeByTypeIdAndModifier,\n      pgGetGqlInputTypeByTypeIdAndModifier,\n      pgIntrospectionResultsByKind: introspectionResultsByKind,\n      pgSql: sql,\n      graphql: {\n        GraphQLNonNull,\n        GraphQLInputObjectType,\n        GraphQLString,\n        GraphQLObjectType,\n        GraphQLID,\n      },\n      pgColumnFilter,\n      inflection,\n      pgQueryFromResolveData: queryFromResolveData,\n      pgOmit: omit,\n      pgViaTemporaryTable: viaTemporaryTable,\n      describePgEntity,\n      sqlCommentByAddingTags,\n      pgField,\n    } = build;\n    const {\n      scope: { isRootMutation },\n      fieldWithHooks,\n    } = context;\n\n    if (!isRootMutation) {\n      return fields;\n    }\n\n    return extend(\n      fields,\n      [\"update\", \"delete\"].reduce(\n        (outerMemo, mode) =>\n          introspectionResultsByKind.class.reduce((memo, table) => {\n            // PERFORMANCE: These used to be .filter(...) calls\n            if (!table.namespace) return memo;\n            const canUpdate =\n              mode === \"update\" && table.isUpdatable && !omit(table, \"update\");\n            const canDelete =\n              mode === \"delete\" && table.isDeletable && !omit(table, \"delete\");\n            if (!canUpdate && !canDelete) return memo;\n\n            const TableType = pgGetGqlTypeByTypeIdAndModifier(\n              table.type.id,\n              null\n            );\n            if (!TableType) {\n              return memo;\n            }\n            async function commonCodeRenameMe(\n              pgClient,\n              resolveInfo,\n              getDataFromParsedResolveInfoFragment,\n              PayloadType,\n              input,\n              condition,\n              context\n            ) {\n              const parsedResolveInfoFragment = parseResolveInfo(resolveInfo);\n              const resolveData = getDataFromParsedResolveInfoFragment(\n                parsedResolveInfoFragment,\n                PayloadType\n              );\n\n              const sqlTypeIdentifier = sql.identifier(\n                table.namespace.name,\n                table.name\n              );\n\n              let sqlMutationQuery;\n              if (mode === \"update\") {\n                const sqlColumns = [];\n                const sqlValues = [];\n                const inputData =\n                  input[\n                    inflection.patchField(inflection.tableFieldName(table))\n                  ];\n                table.attributes.forEach(attr => {\n                  // PERFORMANCE: These used to be .filter(...) calls\n                  if (!pgColumnFilter(attr, build, context)) return;\n                  if (omit(attr, \"update\")) return;\n\n                  const fieldName = inflection.column(attr);\n                  if (\n                    fieldName in inputData /* Because we care about null! */\n                  ) {\n                    const val = inputData[fieldName];\n                    sqlColumns.push(sql.identifier(attr.name));\n                    sqlValues.push(gql2pg(val, attr.type, attr.typeModifier));\n                  }\n                });\n                if (sqlColumns.length === 0) {\n                  return null;\n                }\n                sqlMutationQuery = sql.query`\n                update ${sql.identifier(\n                  table.namespace.name,\n                  table.name\n                )} set ${sql.join(\n                  sqlColumns.map(\n                    (col, i) => sql.fragment`${col} = ${sqlValues[i]}`\n                  ),\n                  \", \"\n                )}\n                where ${condition}\n                returning *`;\n              } else {\n                sqlMutationQuery = sql.query`\n                delete from ${sql.identifier(table.namespace.name, table.name)}\n                where ${condition}\n                returning *`;\n              }\n\n              const modifiedRowAlias = sql.identifier(Symbol());\n              const query = queryFromResolveData(\n                modifiedRowAlias,\n                modifiedRowAlias,\n                resolveData,\n                {}\n              );\n              let row;\n              try {\n                await pgClient.query(\"SAVEPOINT graphql_mutation\");\n                const rows = await viaTemporaryTable(\n                  pgClient,\n                  sqlTypeIdentifier,\n                  sqlMutationQuery,\n                  modifiedRowAlias,\n                  query\n                );\n                row = rows[0];\n                await pgClient.query(\"RELEASE SAVEPOINT graphql_mutation\");\n              } catch (e) {\n                await pgClient.query(\"ROLLBACK TO SAVEPOINT graphql_mutation\");\n                throw e;\n              }\n              if (!row) {\n                throw new Error(\n                  `No values were ${mode}d in collection '${inflection.pluralize(\n                    inflection._singularizedTableName(table)\n                  )}' because no values were found.`\n                );\n              }\n              return {\n                clientMutationId: input.clientMutationId,\n                data: row,\n              };\n            }\n            if (TableType) {\n              const uniqueConstraints = table.constraints.filter(\n                con => con.type === \"u\" || con.type === \"p\"\n              );\n              const Table = pgGetGqlTypeByTypeIdAndModifier(\n                table.type.id,\n                null\n              );\n              const tableTypeName = Table.name;\n              const TablePatch = getTypeByName(\n                inflection.patchType(Table.name)\n              );\n              const PayloadType = newWithHooks(\n                GraphQLObjectType,\n                {\n                  name: inflection[\n                    mode === \"delete\"\n                      ? \"deletePayloadType\"\n                      : \"updatePayloadType\"\n                  ](table),\n                  description: `The output of our ${mode} \\`${tableTypeName}\\` mutation.`,\n                  fields: ({ fieldWithHooks }) => {\n                    const tableName = inflection.tableFieldName(table);\n                    // This should really be `-node-id` but for compatibility with PostGraphQL v3 we haven't made that change.\n                    const deletedNodeIdFieldName = inflection.deletedNodeId(\n                      table\n                    );\n                    return Object.assign(\n                      {\n                        clientMutationId: {\n                          description:\n                            \"The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations.\",\n                          type: GraphQLString,\n                        },\n                        [tableName]: pgField(\n                          build,\n                          fieldWithHooks,\n                          tableName,\n                          {\n                            description: `The \\`${tableTypeName}\\` that was ${mode}d by this mutation.`,\n                            type: Table,\n                          },\n                          {},\n                          false\n                        ),\n                      },\n                      mode === \"delete\"\n                        ? {\n                            [deletedNodeIdFieldName]: fieldWithHooks(\n                              deletedNodeIdFieldName,\n                              ({ addDataGenerator }) => {\n                                const fieldDataGeneratorsByTableType = fieldDataGeneratorsByType.get(\n                                  TableType\n                                );\n\n                                const gens =\n                                  fieldDataGeneratorsByTableType &&\n                                  fieldDataGeneratorsByTableType[\n                                    nodeIdFieldName\n                                  ];\n                                if (gens) {\n                                  gens.forEach(gen => addDataGenerator(gen));\n                                }\n                                return {\n                                  type: GraphQLID,\n                                  resolve(data) {\n                                    return (\n                                      data.data.__identifiers &&\n                                      getNodeIdForTypeAndIdentifiers(\n                                        Table,\n                                        ...data.data.__identifiers\n                                      )\n                                    );\n                                  },\n                                };\n                              },\n                              {\n                                isPgMutationPayloadDeletedNodeIdField: true,\n                              }\n                            ),\n                          }\n                        : null\n                    );\n                  },\n                },\n                {\n                  __origin: `Adding table ${mode} mutation payload type for ${describePgEntity(\n                    table\n                  )}. You can rename the table's GraphQL type via:\\n\\n  ${sqlCommentByAddingTags(\n                    table,\n                    {\n                      name: \"newNameHere\",\n                    }\n                  )}`,\n                  isMutationPayload: true,\n                  isPgUpdatePayloadType: mode === \"update\",\n                  isPgDeletePayloadType: mode === \"delete\",\n                  pgIntrospection: table,\n                }\n              );\n\n              // NodeId\n              const primaryKeyConstraint = table.primaryKeyConstraint;\n              if (nodeIdFieldName && primaryKeyConstraint) {\n                const primaryKeys =\n                  primaryKeyConstraint && primaryKeyConstraint.keyAttributes;\n                const fieldName = inflection[\n                  mode === \"update\" ? \"updateNode\" : \"deleteNode\"\n                ](table);\n                const InputType = newWithHooks(\n                  GraphQLInputObjectType,\n                  {\n                    description: `All input for the \\`${fieldName}\\` mutation.`,\n                    name: inflection[\n                      mode === \"update\"\n                        ? \"updateNodeInputType\"\n                        : \"deleteNodeInputType\"\n                    ](table),\n                    fields: Object.assign(\n                      {\n                        clientMutationId: {\n                          description:\n                            \"An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client.\",\n                          type: GraphQLString,\n                        },\n                        [nodeIdFieldName]: {\n                          description: `The globally unique \\`ID\\` which will identify a single \\`${tableTypeName}\\` to be ${mode}d.`,\n                          type: new GraphQLNonNull(GraphQLID),\n                        },\n                      },\n                      mode === \"update\"\n                        ? {\n                            [inflection.patchField(\n                              inflection.tableFieldName(table)\n                            )]: {\n                              description: `An object where the defined keys will be set on the \\`${tableTypeName}\\` being ${mode}d.`,\n                              type: new GraphQLNonNull(TablePatch),\n                            },\n                          }\n                        : null\n                    ),\n                  },\n                  {\n                    __origin: `Adding table ${mode} (by node ID) mutation input type for ${describePgEntity(\n                      table\n                    )}. You can rename the table's GraphQL type via:\\n\\n  ${sqlCommentByAddingTags(\n                      table,\n                      {\n                        name: \"newNameHere\",\n                      }\n                    )}`,\n                    isPgUpdateInputType: mode === \"update\",\n                    isPgUpdateNodeInputType: mode === \"update\",\n                    isPgDeleteInputType: mode === \"delete\",\n                    isPgDeleteNodeInputType: mode === \"delete\",\n                    pgInflection: table, // TODO:v5: remove - TYPO!\n                    pgIntrospection: table,\n                    isMutationInput: true,\n                  }\n                );\n\n                memo = extend(\n                  memo,\n                  {\n                    [fieldName]: fieldWithHooks(\n                      fieldName,\n                      context => {\n                        const {\n                          getDataFromParsedResolveInfoFragment,\n                        } = context;\n                        return {\n                          description:\n                            mode === \"update\"\n                              ? `Updates a single \\`${tableTypeName}\\` using its globally unique id and a patch.`\n                              : `Deletes a single \\`${tableTypeName}\\` using its globally unique id.`,\n                          type: PayloadType,\n                          args: {\n                            input: {\n                              type: new GraphQLNonNull(InputType),\n                            },\n                          },\n                          async resolve(\n                            parent,\n                            { input },\n                            { pgClient },\n                            resolveInfo\n                          ) {\n                            const nodeId = input[nodeIdFieldName];\n                            try {\n                              const {\n                                Type,\n                                identifiers,\n                              } = getTypeAndIdentifiersFromNodeId(nodeId);\n                              if (Type !== TableType) {\n                                throw new Error(\"Mismatched type\");\n                              }\n                              if (identifiers.length !== primaryKeys.length) {\n                                throw new Error(\"Invalid ID\");\n                              }\n\n                              return commonCodeRenameMe(\n                                pgClient,\n                                resolveInfo,\n                                getDataFromParsedResolveInfoFragment,\n                                PayloadType,\n                                input,\n                                sql.fragment`(${sql.join(\n                                  primaryKeys.map(\n                                    (key, idx) =>\n                                      sql.fragment`${sql.identifier(\n                                        key.name\n                                      )} = ${gql2pg(\n                                        identifiers[idx],\n                                        key.type,\n                                        key.typeModifier\n                                      )}`\n                                  ),\n                                  \") and (\"\n                                )})`,\n                                context\n                              );\n                            } catch (e) {\n                              debug(e);\n                              return null;\n                            }\n                          },\n                        };\n                      },\n                      {\n                        isPgNodeMutation: true,\n                        pgFieldIntrospection: table,\n                        [mode === \"update\"\n                          ? \"isPgUpdateMutationField\"\n                          : \"isPgDeleteMutationField\"]: true,\n                      }\n                    ),\n                  },\n                  \"Adding ${mode} mutation for ${describePgEntity(table)}\"\n                );\n              }\n\n              // Unique\n              uniqueConstraints.forEach(constraint => {\n                if (omit(constraint, mode)) {\n                  return;\n                }\n                const keys = constraint.keyAttributes;\n                if (!keys.every(_ => _)) {\n                  throw new Error(\n                    `Consistency error: could not find an attribute in the constraint when building the ${mode} mutation for ${describePgEntity(\n                      table\n                    )}!`\n                  );\n                }\n                if (keys.some(key => omit(key, \"read\"))) {\n                  return;\n                }\n                const fieldName = inflection[\n                  mode === \"update\" ? \"updateByKeys\" : \"deleteByKeys\"\n                ](keys, table, constraint);\n                const InputType = newWithHooks(\n                  GraphQLInputObjectType,\n                  {\n                    description: `All input for the \\`${fieldName}\\` mutation.`,\n                    name: inflection[\n                      mode === \"update\"\n                        ? \"updateByKeysInputType\"\n                        : \"deleteByKeysInputType\"\n                    ](keys, table, constraint),\n                    fields: Object.assign(\n                      {\n                        clientMutationId: {\n                          type: GraphQLString,\n                        },\n                      },\n                      mode === \"update\"\n                        ? {\n                            [inflection.patchField(\n                              inflection.tableFieldName(table)\n                            )]: {\n                              description: `An object where the defined keys will be set on the \\`${tableTypeName}\\` being ${mode}d.`,\n                              type: new GraphQLNonNull(TablePatch),\n                            },\n                          }\n                        : null,\n                      keys.reduce((memo, key) => {\n                        memo[inflection.column(key)] = {\n                          description: key.description,\n                          type: new GraphQLNonNull(\n                            pgGetGqlInputTypeByTypeIdAndModifier(\n                              key.typeId,\n                              key.typeModifier\n                            )\n                          ),\n                        };\n                        return memo;\n                      }, {})\n                    ),\n                  },\n                  {\n                    __origin: `Adding table ${mode} mutation input type for ${describePgEntity(\n                      constraint\n                    )}. You can rename the table's GraphQL type via:\\n\\n  ${sqlCommentByAddingTags(\n                      table,\n                      {\n                        name: \"newNameHere\",\n                      }\n                    )}`,\n                    isPgUpdateInputType: mode === \"update\",\n                    isPgUpdateByKeysInputType: mode === \"update\",\n                    isPgDeleteInputType: mode === \"delete\",\n                    isPgDeleteByKeysInputType: mode === \"delete\",\n                    pgInflection: table, // TODO:v5: remove - TYPO!\n                    pgIntrospection: table,\n                    pgKeys: keys,\n                    isMutationInput: true,\n                  }\n                );\n\n                memo = extend(\n                  memo,\n                  {\n                    [fieldName]: fieldWithHooks(\n                      fieldName,\n                      context => {\n                        const {\n                          getDataFromParsedResolveInfoFragment,\n                        } = context;\n                        return {\n                          description:\n                            mode === \"update\"\n                              ? `Updates a single \\`${tableTypeName}\\` using a unique key and a patch.`\n                              : `Deletes a single \\`${tableTypeName}\\` using a unique key.`,\n                          type: PayloadType,\n                          args: {\n                            input: {\n                              type: new GraphQLNonNull(InputType),\n                            },\n                          },\n                          async resolve(\n                            parent,\n                            { input },\n                            { pgClient },\n                            resolveInfo\n                          ) {\n                            return commonCodeRenameMe(\n                              pgClient,\n                              resolveInfo,\n                              getDataFromParsedResolveInfoFragment,\n                              PayloadType,\n                              input,\n                              sql.fragment`(${sql.join(\n                                keys.map(\n                                  key =>\n                                    sql.fragment`${sql.identifier(\n                                      key.name\n                                    )} = ${gql2pg(\n                                      input[inflection.column(key)],\n                                      key.type,\n                                      key.typeModifier\n                                    )}`\n                                ),\n                                \") and (\"\n                              )})`,\n                              context\n                            );\n                          },\n                        };\n                      },\n                      {\n                        isPgNodeMutation: false,\n                        pgFieldIntrospection: table,\n                        pgFieldConstraint: constraint,\n                        [mode === \"update\"\n                          ? \"isPgUpdateMutationField\"\n                          : \"isPgDeleteMutationField\"]: true,\n                      }\n                    ),\n                  },\n                  `Adding ${mode} mutation for ${describePgEntity(constraint)}`\n                );\n              });\n            }\n            return memo;\n          }, outerMemo),\n        {}\n      ),\n      `Adding default update/delete mutations to root Mutation type`\n    );\n  });\n}: Plugin);\n"]}