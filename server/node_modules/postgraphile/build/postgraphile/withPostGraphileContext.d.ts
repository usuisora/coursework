import jwt = require('jsonwebtoken');
import { Pool } from 'pg';
import { ExecutionResult } from 'graphql';
import { mixed } from '../interfaces';
export declare type WithPostGraphileContextFn = (options: {
    pgPool: Pool;
    jwtToken?: string;
    jwtSecret?: string;
    jwtAudiences?: Array<string>;
    jwtRole?: Array<string>;
    jwtVerifyOptions?: jwt.VerifyOptions;
    pgDefaultRole?: string;
    pgSettings?: {
        [key: string]: mixed;
    };
}, callback: (context: mixed) => Promise<ExecutionResult>) => Promise<ExecutionResult>;
/**
 * Creates a PostGraphile context object which should be passed into a GraphQL
 * execution. This function will also connect a client from a Postgres pool and
 * setup a transaction in that client.
 *
 * This function is intended to wrap a call to GraphQL-js execution like so:
 *
 * ```js
 * const result = await withPostGraphileContext({
 *   pgPool,
 *   jwtToken,
 *   jwtSecret,
 *   pgDefaultRole,
 * }, async context => {
 *   return await graphql(
 *     schema,
 *     query,
 *     null,
 *     { ...context },
 *     variables,
 *     operationName,
 *   );
 * });
 * ```
 */
declare const withPostGraphileContext: WithPostGraphileContextFn;
export default withPostGraphileContext;
