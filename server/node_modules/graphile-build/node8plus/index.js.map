{"version":3,"sources":["../src/index.js"],"names":["constantCaseAll","formatInsideUnderscores","upperFirst","camelCase","constantCase","upperCamelCase","pluralize","singularize","getBuilder","plugins","options","builder","SchemaBuilder","i","l","length","plugin","Error","util","inspect","_setPluginName","displayName","name","buildSchema","defaultPlugins","SwallowErrorsPlugin","StandardTypesPlugin","NodePlugin","QueryPlugin","MutationPlugin","SubscriptionPlugin","ClientMutationIdDescriptionPlugin","MutationPayloadQueryPlugin","resolveNode"],"mappings":";;;;;;;;;;;;kBAoBEA,e;;;;;;kBACAC,uB;;;;;;kBACAC,U;;;;;;kBACAC,S;;;;;;kBACAC,Y;;;;;;kBACAC,c;;;;;;kBACAC,S;;;;;;kBACAC,W;;;;AAzBF;;;;AACA;;;;AACA;;AAUA;;;;;;AA8BO,MAAMC,kCAAa,OACxBC,OADwB,EAExBC,UAAmB,EAFK,KAGG;AAC3B,QAAMC,UAAU,IAAIC,uBAAJ,EAAhB;AACA,OAAK,IAAIC,IAAI,CAAR,EAAWC,IAAIL,QAAQM,MAA5B,EAAoCF,IAAIC,CAAxC,EAA2CD,GAA3C,EAAgD;AAC9C,UAAMG,SAASP,QAAQI,CAAR,CAAf;AACA,QAAI,OAAOG,MAAP,KAAkB,UAAtB,EAAkC;AAChC,YAAM,IAAIC,KAAJ,CACH,uFAAsFJ,CAAE,KAAIK,eAAKC,OAAL,CAC3FH,MAD2F,CAE3F,EAHE,CAAN;AAKD;AACDL,YAAQS,cAAR,CAAuBJ,OAAOK,WAAP,IAAsBL,OAAOM,IAApD;AACA,UAAMN,OAAOL,OAAP,EAAgBD,OAAhB,CAAN;AACAC,YAAQS,cAAR,CAAuB,IAAvB;AACD;AACD,SAAOT,OAAP;AACD,CAnBM;;AAqBA,MAAMY,oCAAc,OACzBd,OADyB,EAEzBC,UAAmB,EAFM,KAGE;AAC3B,QAAMC,UAAyB,MAAMH,WAAWC,OAAX,EAAoBC,OAApB,CAArC;AACA,SAAOC,QAAQY,WAAR,EAAP;AACD,CANM;;AAQA,MAAMC,0CAAgC,CAC3CC,4BAD2C,EAE3CC,4BAF2C,EAG3CC,mBAH2C,EAI3CC,oBAJ2C,EAK3CC,uBAL2C,EAM3CC,2BAN2C,EAO3CC,0CAP2C,EAQ3CC,mCAR2C,CAAtC;;QAYLP,mB,GAAAA,4B;QACAC,mB,GAAAA,4B;QACAC,U,GAAAA,mB;QACAC,W,GAAAA,oB;QACAC,c,GAAAA,uB;QACAC,kB,GAAAA,2B;QACAC,iC,GAAAA,0C;QACAC,0B,GAAAA,mC;QAEAC,W,GAAAA,qB","file":"index.js","sourcesContent":["// @flow\n\nimport util from \"util\";\nimport SchemaBuilder from \"./SchemaBuilder\";\nimport {\n  SwallowErrorsPlugin,\n  StandardTypesPlugin,\n  NodePlugin,\n  QueryPlugin,\n  MutationPlugin,\n  SubscriptionPlugin,\n  ClientMutationIdDescriptionPlugin,\n  MutationPayloadQueryPlugin,\n} from \"./plugins\";\nimport resolveNode from \"./resolveNode\";\nimport type { GraphQLSchema } from \"graphql\";\n\nimport type { Plugin, Options } from \"./SchemaBuilder\";\n\nexport {\n  constantCaseAll,\n  formatInsideUnderscores,\n  upperFirst,\n  camelCase,\n  constantCase,\n  upperCamelCase,\n  pluralize,\n  singularize,\n} from \"./utils\";\n\nexport type { SchemaBuilder };\n\nexport type {\n  Plugin,\n  Options,\n  Build,\n  BuildExtensionQuery,\n  Scope,\n  Context,\n  Hook,\n  WatchUnwatch,\n  SchemaListener,\n} from \"./SchemaBuilder\";\n\nexport const getBuilder = async (\n  plugins: Array<Plugin>,\n  options: Options = {}\n): Promise<SchemaBuilder> => {\n  const builder = new SchemaBuilder();\n  for (let i = 0, l = plugins.length; i < l; i++) {\n    const plugin = plugins[i];\n    if (typeof plugin !== \"function\") {\n      throw new Error(\n        `Expected a list of plugin functions, instead list contained a non-function at index ${i}: ${util.inspect(\n          plugin\n        )}`\n      );\n    }\n    builder._setPluginName(plugin.displayName || plugin.name);\n    await plugin(builder, options);\n    builder._setPluginName(null);\n  }\n  return builder;\n};\n\nexport const buildSchema = async (\n  plugins: Array<Plugin>,\n  options: Options = {}\n): Promise<GraphQLSchema> => {\n  const builder: SchemaBuilder = await getBuilder(plugins, options);\n  return builder.buildSchema();\n};\n\nexport const defaultPlugins: Array<Plugin> = [\n  SwallowErrorsPlugin,\n  StandardTypesPlugin,\n  NodePlugin,\n  QueryPlugin,\n  MutationPlugin,\n  SubscriptionPlugin,\n  ClientMutationIdDescriptionPlugin,\n  MutationPayloadQueryPlugin,\n];\n\nexport {\n  SwallowErrorsPlugin,\n  StandardTypesPlugin,\n  NodePlugin,\n  QueryPlugin,\n  MutationPlugin,\n  SubscriptionPlugin,\n  ClientMutationIdDescriptionPlugin,\n  MutationPayloadQueryPlugin,\n  // resolveNode: EXPERIMENTAL, API might change!\n  resolveNode,\n};\n"]}