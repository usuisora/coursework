{"version":3,"sources":["../src/resolveNode.js"],"names":["resolveNode","nodeId","build","getDataFromParsedResolveInfoFragment","data","context","resolveInfo","$$isQuery","$$nodeType","parseResolveInfo","nodeFetcherByTypeName","getTypeAndIdentifiersFromNodeId","graphql","getNamedType","Type","identifiers","Error","resolver","name","parsedResolveInfoFragment","resolveData","node","returnType","Object","defineProperty","enumerable","configurable","value","e"],"mappings":";;;;;;kBAAe,eAAeA,WAAf,CACbC,MADa,EAEbC,KAFa,EAGb,EAAEC,oCAAF,EAHa,EAIbC,IAJa,EAKbC,OALa,EAMbC,WANa,EAOb;AACA,QAAM;AACJC,aADI;AAEJC,cAFI;AAGJC,oBAHI;AAIJC,yBAJI;AAKJC,mCALI;AAMJC,aAAS,EAAEC,YAAF;AANL,MAOFX,KAPJ;AAQA,MAAID,WAAW,OAAf,EAAwB;AACtB,WAAOM,SAAP;AACD;AACD,MAAI;AACF,UAAM,EAAEO,IAAF,EAAQC,WAAR,KAAwBJ,gCAAgCV,MAAhC,CAA9B;AACA,QAAI,CAACa,IAAL,EAAW;AACT,YAAM,IAAIE,KAAJ,CAAU,gBAAV,CAAN;AACD;AACD,UAAMC,WAAWP,sBAAsBG,aAAaC,IAAb,EAAmBI,IAAzC,CAAjB;AACA,UAAMC,4BAA4BV,iBAAiBH,WAAjB,EAA8B,EAA9B,EAAkCQ,IAAlC,CAAlC;AACA,UAAMM,cAAcjB,qCAClBgB,yBADkB,EAElBN,aAAaC,IAAb,CAFkB,CAApB;AAIA,UAAMO,OAAO,MAAMJ,SACjBb,IADiB,EAEjBW,WAFiB,EAGjBV,OAHiB,EAIjBc,yBAJiB,EAKjBb,YAAYgB,UALK,EAMjBF,WANiB,CAAnB;AAQAG,WAAOC,cAAP,CAAsBH,IAAtB,EAA4Bb,UAA5B,EAAwC;AACtCiB,kBAAY,KAD0B;AAEtCC,oBAAc,KAFwB;AAGtCC,aAAOb;AAH+B,KAAxC;AAKA,WAAOO,IAAP;AACD,GAzBD,CAyBE,OAAOO,CAAP,EAAU;AACV,WAAO,IAAP;AACD;AACF,C","file":"resolveNode.js","sourcesContent":["export default async function resolveNode(\n  nodeId,\n  build,\n  { getDataFromParsedResolveInfoFragment },\n  data,\n  context,\n  resolveInfo\n) {\n  const {\n    $$isQuery,\n    $$nodeType,\n    parseResolveInfo,\n    nodeFetcherByTypeName,\n    getTypeAndIdentifiersFromNodeId,\n    graphql: { getNamedType },\n  } = build;\n  if (nodeId === \"query\") {\n    return $$isQuery;\n  }\n  try {\n    const { Type, identifiers } = getTypeAndIdentifiersFromNodeId(nodeId);\n    if (!Type) {\n      throw new Error(\"Type not found\");\n    }\n    const resolver = nodeFetcherByTypeName[getNamedType(Type).name];\n    const parsedResolveInfoFragment = parseResolveInfo(resolveInfo, {}, Type);\n    const resolveData = getDataFromParsedResolveInfoFragment(\n      parsedResolveInfoFragment,\n      getNamedType(Type)\n    );\n    const node = await resolver(\n      data,\n      identifiers,\n      context,\n      parsedResolveInfoFragment,\n      resolveInfo.returnType,\n      resolveData\n    );\n    Object.defineProperty(node, $$nodeType, {\n      enumerable: false,\n      configurable: false,\n      value: Type,\n    });\n    return node;\n  } catch (e) {\n    return null;\n  }\n}\n"]}