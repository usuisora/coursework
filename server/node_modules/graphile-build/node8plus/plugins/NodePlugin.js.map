{"version":3,"sources":["../../src/plugins/NodePlugin.js"],"names":["base64","str","Buffer","from","String","toString","base64Decode","NodePlugin","builder","nodeIdFieldName","inNodeIdFieldName","hook","build","nodeFetcherByTypeName","nodeAliasByTypeName","nodeTypeNameByAlias","extend","$$nodeType","Symbol","getNodeIdForTypeAndIdentifiers","Type","identifiers","JSON","stringify","getNodeAlias","getTypeAndIdentifiersFromNodeId","nodeId","alias","parse","getNodeType","addNodeFetcherForTypeName","typeName","fetcher","Error","getTypeByName","setNodeAlias","defineNodeInterfaceType","_","$$isQuery","newWithHooks","graphql","GraphQLNonNull","GraphQLID","GraphQLInterfaceType","getNullableType","inflection","Query","name","builtin","description","resolveType","value","fields","type","__origin","addNodeIdToQuery","interfaces","context","scope","isRootQuery","fieldWithHooks","resolve","node","getDataFromParsedResolveInfoFragment","args","data","resolveInfo","isRootNodeField"],"mappings":"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","file":"NodePlugin.js","sourcesContent":["// @flow\nimport type {\n  Plugin,\n  Build,\n  DataForType,\n  Context,\n  ContextGraphQLObjectTypeFields,\n} from \"../SchemaBuilder\";\nimport resolveNode from \"../resolveNode\";\nimport type { ResolveTree } from \"graphql-parse-resolve-info\";\nimport type { GraphQLType, GraphQLInterfaceType } from \"graphql\";\nimport type { BuildExtensionQuery } from \"./QueryPlugin\";\n\nconst base64 = str => Buffer.from(String(str)).toString(\"base64\");\nconst base64Decode = str => Buffer.from(String(str), \"base64\").toString(\"utf8\");\n\nexport type NodeFetcher = (\n  data: mixed,\n  identifiers: Array<mixed>,\n  context: mixed,\n  parsedResolveInfoFragment: ResolveTree,\n  type: GraphQLType,\n  resolveData: DataForType\n) => {};\n\nexport type BuildExtensionNode = {|\n  nodeIdFieldName: string,\n  $$nodeType: Symbol,\n  nodeFetcherByTypeName: { [string]: NodeFetcher },\n  getNodeIdForTypeAndIdentifiers(\n    Type: GraphQLType,\n    ...identifiers: Array<mixed>\n  ): string,\n  getTypeAndIdentifiersFromNodeId(\n    nodeId: string\n  ): {\n    Type: GraphQLType,\n    identifiers: Array<mixed>,\n  },\n  addNodeFetcherForTypeName(typeName: string, fetcher: NodeFetcher): void,\n  getNodeAlias(typeName: string): string,\n  getNodeType(alias: string): GraphQLType,\n  setNodeAlias(typeName: string, alias: string): void,\n|};\n\nexport default (function NodePlugin(\n  builder,\n  { nodeIdFieldName: inNodeIdFieldName }\n) {\n  const nodeIdFieldName: string = inNodeIdFieldName\n    ? String(inNodeIdFieldName)\n    : \"id\";\n  builder.hook(\n    \"build\",\n    (build: Build): Build & BuildExtensionNode => {\n      const nodeFetcherByTypeName = {};\n      const nodeAliasByTypeName = {};\n      const nodeTypeNameByAlias = {};\n      return build.extend(\n        build,\n        {\n          nodeIdFieldName,\n          $$nodeType: Symbol(\"nodeType\"),\n          nodeFetcherByTypeName,\n          getNodeIdForTypeAndIdentifiers(Type, ...identifiers) {\n            return base64(\n              JSON.stringify([this.getNodeAlias(Type), ...identifiers])\n            );\n          },\n          getTypeAndIdentifiersFromNodeId(nodeId) {\n            const [alias, ...identifiers] = JSON.parse(base64Decode(nodeId));\n            return {\n              Type: this.getNodeType(alias),\n              identifiers,\n            };\n          },\n          addNodeFetcherForTypeName(typeName, fetcher) {\n            if (nodeFetcherByTypeName[typeName]) {\n              throw new Error(\"There's already a fetcher for this type\");\n            }\n            if (!fetcher) {\n              throw new Error(\"No fetcher specified\");\n            }\n            nodeFetcherByTypeName[typeName] = fetcher;\n          },\n          getNodeAlias(typeName) {\n            return nodeAliasByTypeName[typeName] || typeName;\n          },\n          getNodeType(alias) {\n            return this.getTypeByName(nodeTypeNameByAlias[alias] || alias);\n          },\n          setNodeAlias(typeName, alias) {\n            nodeAliasByTypeName[typeName] = alias;\n            nodeTypeNameByAlias[alias] = typeName;\n          },\n        },\n        `Adding 'Node' interface support to the Build`\n      );\n    }\n  );\n\n  builder.hook(\"init\", function defineNodeInterfaceType(\n    _: {},\n    build: {| ...Build, ...BuildExtensionQuery, ...BuildExtensionNode |}\n  ) {\n    const {\n      $$isQuery,\n      $$nodeType,\n      getTypeByName,\n      newWithHooks,\n      graphql: {\n        GraphQLNonNull,\n        GraphQLID,\n        GraphQLInterfaceType,\n        getNullableType,\n      },\n      inflection,\n    } = build;\n    let Query;\n    newWithHooks(\n      GraphQLInterfaceType,\n      {\n        name: inflection.builtin(\"Node\"),\n        description: \"An object with a globally unique `ID`.\",\n        resolveType: value => {\n          if (value === $$isQuery) {\n            if (!Query) Query = getTypeByName(inflection.builtin(\"Query\"));\n            return Query;\n          } else if (value[$$nodeType]) {\n            return getNullableType(value[$$nodeType]);\n          }\n        },\n        fields: {\n          [nodeIdFieldName]: {\n            description:\n              \"A globally unique identifier. Can be used in various places throughout the system to identify this single value.\",\n            type: new GraphQLNonNull(GraphQLID),\n          },\n        },\n      },\n      {\n        __origin: `graphile-build built-in (NodePlugin); you can omit this plugin if you like, but you'll lose compatibility with Relay`,\n      }\n    );\n    return _;\n  });\n\n  builder.hook(\"GraphQLObjectType:interfaces\", function addNodeIdToQuery(\n    interfaces: Array<GraphQLInterfaceType>,\n    build,\n    context\n  ) {\n    const { getTypeByName, inflection } = build;\n    const {\n      scope: { isRootQuery },\n    } = context;\n    if (!isRootQuery) {\n      return interfaces;\n    }\n    const Type = getTypeByName(inflection.builtin(\"Node\"));\n    if (Type) {\n      return [...interfaces, Type];\n    } else {\n      return interfaces;\n    }\n  });\n\n  builder.hook(\n    \"GraphQLObjectType:fields\",\n    (\n      fields: {},\n      build: {| ...Build, ...BuildExtensionQuery, ...BuildExtensionNode |},\n      context: {| ...Context, ...ContextGraphQLObjectTypeFields |}\n    ) => {\n      const {\n        scope: { isRootQuery },\n        fieldWithHooks,\n      } = context;\n      if (!isRootQuery) {\n        return fields;\n      }\n      const {\n        getTypeByName,\n        extend,\n        graphql: { GraphQLNonNull, GraphQLID },\n        inflection,\n      } = build;\n      return extend(\n        fields,\n        {\n          [nodeIdFieldName]: {\n            description:\n              \"The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.\",\n            type: new GraphQLNonNull(GraphQLID),\n            resolve() {\n              return \"query\";\n            },\n          },\n          node: fieldWithHooks(\n            \"node\",\n            ({ getDataFromParsedResolveInfoFragment }) => ({\n              description: \"Fetches an object given its globally unique `ID`.\",\n              type: getTypeByName(inflection.builtin(\"Node\")),\n              args: {\n                [nodeIdFieldName]: {\n                  description: \"The globally unique `ID`.\",\n                  type: new GraphQLNonNull(GraphQLID),\n                },\n              },\n              resolve(data, args, context, resolveInfo) {\n                const nodeId = args[nodeIdFieldName];\n                return resolveNode(\n                  nodeId,\n                  build,\n                  { getDataFromParsedResolveInfoFragment },\n                  data,\n                  context,\n                  resolveInfo\n                );\n              },\n            }),\n            {\n              isRootNodeField: true,\n            }\n          ),\n        },\n        `Adding Relay Global Object Identification support to the root Query via 'node' and '${nodeIdFieldName}' fields`\n      );\n    }\n  );\n}: Plugin);\n"]}