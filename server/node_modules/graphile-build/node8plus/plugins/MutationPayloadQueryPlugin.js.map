{"version":3,"sources":["../../src/plugins/MutationPayloadQueryPlugin.js"],"names":["MutationPayloadQueryPlugin","builder","hook","fields","build","context","$$isQuery","extend","getTypeByName","inflection","scope","isMutationPayload","Self","Query","builtin","query","description","type","resolve","name"],"mappings":";;;;;;kBAIgB,SAASA,0BAAT,CAAoCC,OAApC,EAA6C;AAC3DA,UAAQC,IAAR,CACE,0BADF,EAEE,CACEC,MADF,EAEEC,KAFF,EAGEC,OAHF,KAIS;AACP,UAAM,EAAEC,SAAF,EAAaC,MAAb,EAAqBC,aAArB,EAAoCC,UAApC,KAAmDL,KAAzD;AACA,UAAM;AACJM,aAAO,EAAEC,iBAAF,EADH;AAEJC;AAFI,QAGFP,OAHJ;AAIA,QAAI,CAACM,iBAAL,EAAwB;AACtB,aAAOR,MAAP;AACD;AACD,UAAMU,QAAQL,cAAcC,WAAWK,OAAX,CAAmB,OAAnB,CAAd,CAAd;AACA,WAAOP,OACLJ,MADK,EAEL;AACEY,aAAO;AACLC,qBACE,kFAFG;AAGLC,cAAMJ,KAHD;AAILK,kBAAU;AACR,iBAAOZ,SAAP;AACD;AANI;AADT,KAFK,EAYJ,4CAA2CM,KAAKO,IAAK,EAZjD,CAAP;AAcD,GA9BH;AAgCD,C","file":"MutationPayloadQueryPlugin.js","sourcesContent":["// @flow\nimport type { Plugin, Build } from \"../SchemaBuilder\";\nimport type { BuildExtensionQuery } from \"./QueryPlugin\";\n\nexport default (function MutationPayloadQueryPlugin(builder) {\n  builder.hook(\n    \"GraphQLObjectType:fields\",\n    (\n      fields: {},\n      build: {| ...Build, ...BuildExtensionQuery |},\n      context\n    ): {} => {\n      const { $$isQuery, extend, getTypeByName, inflection } = build;\n      const {\n        scope: { isMutationPayload },\n        Self,\n      } = context;\n      if (!isMutationPayload) {\n        return fields;\n      }\n      const Query = getTypeByName(inflection.builtin(\"Query\"));\n      return extend(\n        fields,\n        {\n          query: {\n            description:\n              \"Our root query field type. Allows us to run any query from our mutation payload.\",\n            type: Query,\n            resolve() {\n              return $$isQuery;\n            },\n          },\n        },\n        `Adding 'query' field to mutation payload ${Self.name}`\n      );\n    }\n  );\n}: Plugin);\n"]}