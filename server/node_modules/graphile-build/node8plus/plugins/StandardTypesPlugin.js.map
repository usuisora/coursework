{"version":3,"sources":["../../src/plugins/StandardTypesPlugin.js"],"names":["StandardTypesPlugin","builder","hook","build","stringType","name","description","graphql","GraphQLScalarType","serialize","value","String","parseValue","parseLiteral","ast","kind","Kind","STRING","Error","Cursor","addType","_","newWithHooks","GraphQLNonNull","GraphQLObjectType","GraphQLBoolean","inflection","builtin","fields","fieldWithHooks","hasNextPage","addDataGenerator","calculateHasNextPage","type","isPageInfoHasNextPageField","hasPreviousPage","calculateHasPreviousPage","isPageInfoHasPreviousPageField","__origin","isPageInfo"],"mappings":";;;;;;AAEA;;kBAEgB,SAASA,mBAAT,CAA6BC,OAA7B,EAAsC;AACpD;AACAA,UAAQC,IAAR,CACE,OADF,EAEGC,KAAD,IAAyB;AACvB,UAAMC,aAAa,CAACC,IAAD,EAAOC,WAAP,KACjB,IAAIH,MAAMI,OAAN,CAAcC,iBAAlB,CAAoC;AAClCH,UADkC;AAElCC,iBAFkC;AAGlCG,iBAAWC,SAASC,OAAOD,KAAP,CAHc;AAIlCE,kBAAYF,SAASC,OAAOD,KAAP,CAJa;AAKlCG,oBAAcC,OAAO;AACnB,YAAIA,IAAIC,IAAJ,KAAaC,eAAKC,MAAtB,EAA8B;AAC5B,gBAAM,IAAIC,KAAJ,CAAU,8BAAV,CAAN;AACD;AACD,eAAOJ,IAAIJ,KAAX;AACD;AAViC,KAApC,CADF;;AAcA,UAAMS,SAASf,WACb,QADa,EAEb,sEAFa,CAAf;AAIAD,UAAMiB,OAAN,CAAcD,MAAd,EAAsB,yBAAtB;AACA,WAAOhB,KAAP;AACD,GAvBH;AAyBAF,UAAQC,IAAR,CAAa,MAAb,EAAqB,CAACmB,CAAD,EAAQlB,KAAR,KAAkB;AACrC,UAAM;AACJmB,kBADI;AAEJf,eAAS,EAAEgB,cAAF,EAAkBC,iBAAlB,EAAqCC,cAArC,EAFL;AAGJC;AAHI,QAIFvB,KAJJ;AAKA;AACA;AACAmB,iBACEE,iBADF,EAEE;AACEnB,YAAMqB,WAAWC,OAAX,CAAmB,UAAnB,CADR;AAEErB,mBAAa,+CAFf;AAGEsB,cAAQ,CAAC,EAAEC,cAAF,EAAD,MAAyB;AAC/BC,qBAAaD,eACX,aADW,EAEX,CAAC,EAAEE,gBAAF,EAAD,KAA0B;AACxBA,2BAAiB,MAAM;AACrB,mBAAO;AACLC,oCAAsB;AADjB,aAAP;AAGD,WAJD;AAKA,iBAAO;AACL1B,yBAAa,iDADR;AAEL2B,kBAAM,IAAIV,cAAJ,CAAmBE,cAAnB;AAFD,WAAP;AAID,SAZU,EAaX,EAAES,4BAA4B,IAA9B,EAbW,CADkB;AAgB/BC,yBAAiBN,eACf,iBADe,EAEf,CAAC,EAAEE,gBAAF,EAAD,KAA0B;AACxBA,2BAAiB,MAAM;AACrB,mBAAO;AACLK,wCAA0B;AADrB,aAAP;AAGD,WAJD;AAKA,iBAAO;AACL9B,yBAAa,kDADR;AAEL2B,kBAAM,IAAIV,cAAJ,CAAmBE,cAAnB;AAFD,WAAP;AAID,SAZc,EAaf,EAAEY,gCAAgC,IAAlC,EAbe;AAhBc,OAAzB;AAHV,KAFF,EAsCE;AACEC,gBAAW,yBADb;AAEEC,kBAAY;AAFd,KAtCF;AA2CA,WAAOlB,CAAP;AACD,GApDD;AAqDD,C","file":"StandardTypesPlugin.js","sourcesContent":["// @flow\nimport type { Plugin, Build } from \"../SchemaBuilder\";\nimport { Kind } from \"graphql/language\";\n\nexport default (function StandardTypesPlugin(builder) {\n  // XXX: this should be in an \"init\" plugin, but PgTypesPlugin requires it in build - fix that, then fix this\n  builder.hook(\n    \"build\",\n    (build: Build): Build => {\n      const stringType = (name, description) =>\n        new build.graphql.GraphQLScalarType({\n          name,\n          description,\n          serialize: value => String(value),\n          parseValue: value => String(value),\n          parseLiteral: ast => {\n            if (ast.kind !== Kind.STRING) {\n              throw new Error(\"Can only parse string values\");\n            }\n            return ast.value;\n          },\n        });\n\n      const Cursor = stringType(\n        \"Cursor\",\n        \"A location in a connection that can be used for resuming pagination.\"\n      );\n      build.addType(Cursor, \"graphile-build built-in\");\n      return build;\n    }\n  );\n  builder.hook(\"init\", (_: {}, build) => {\n    const {\n      newWithHooks,\n      graphql: { GraphQLNonNull, GraphQLObjectType, GraphQLBoolean },\n      inflection,\n    } = build;\n    // https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo\n    /* const PageInfo = */\n    newWithHooks(\n      GraphQLObjectType,\n      {\n        name: inflection.builtin(\"PageInfo\"),\n        description: \"Information about pagination in a connection.\",\n        fields: ({ fieldWithHooks }) => ({\n          hasNextPage: fieldWithHooks(\n            \"hasNextPage\",\n            ({ addDataGenerator }) => {\n              addDataGenerator(() => {\n                return {\n                  calculateHasNextPage: true,\n                };\n              });\n              return {\n                description: \"When paginating forwards, are there more items?\",\n                type: new GraphQLNonNull(GraphQLBoolean),\n              };\n            },\n            { isPageInfoHasNextPageField: true }\n          ),\n          hasPreviousPage: fieldWithHooks(\n            \"hasPreviousPage\",\n            ({ addDataGenerator }) => {\n              addDataGenerator(() => {\n                return {\n                  calculateHasPreviousPage: true,\n                };\n              });\n              return {\n                description: \"When paginating backwards, are there more items?\",\n                type: new GraphQLNonNull(GraphQLBoolean),\n              };\n            },\n            { isPageInfoHasPreviousPageField: true }\n          ),\n        }),\n      },\n      {\n        __origin: `graphile-build built-in`,\n        isPageInfo: true,\n      }\n    );\n    return _;\n  });\n}: Plugin);\n"]}